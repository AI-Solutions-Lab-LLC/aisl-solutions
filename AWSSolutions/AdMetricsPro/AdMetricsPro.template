{
  "Description": "(SO0193) - Amazon Marketing Cloud Insights. Version v2.0.1",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [],
      "ParameterLabels": {}
    },
    "aws:solutions:templatename": "amazon-marketing-cloud-insights.template",
    "aws:solutions:solution_id": "SO0193",
    "aws:solutions:solution_version": "v2.0.1"
  },
  "Mappings": {
    "Solution": {
      "Data": {
        "ID": "SO0193",
        "Version": "v2.0.1",
        "SendAnonymousUsageData": "Yes"
      }
    },
    "SourceCode": {
      "General": {
        "S3Bucket": "solutions",
        "KeyPrefix": "amazon-marketing-cloud-insights-on-aws/v2.0.1"
      }
    }
  },
  "Parameters": {
    "NotificationEmail": {
      "Type": "String",
      "AllowedPattern": "(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$|^$)",
      "ConstraintDescription": "Must be a valid email address",
      "Description": "Email address to notify subscriber of workflow query results.",
      "MaxLength": 50
    },
    "ShouldDeployMicroservices": {
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Yes - Deploy the Tenant Provisioning Service, Workflow Manager, and Platform Manager Notebooks. \n No - Skip microservice deployment."
    },
    "ShouldDeployDataLake": {
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Description": "Yes - Deploy the data lake. \n No - Skip data lake deployment."
    }
  },
  "Conditions": {
    "ShouldDeployDataLakeCondition": {
      "Fn::Equals": [
        {
          "Ref": "ShouldDeployDataLake"
        },
        "Yes"
      ]
    },
    "ShouldDeployMicroservicesCondition": {
      "Fn::Equals": [
        {
          "Ref": "ShouldDeployMicroservices"
        },
        "Yes"
      ]
    },
    "DeployingFullApplication": {
      "Fn::Equals": [
        {
          "Ref": "ShouldDeployMicroservices"
        },
        {
          "Ref": "ShouldDeployDataLake"
        }
      ]
    },
    "SendAnonymousUsageData": {
      "Fn::Equals": [
        {
          "Fn::FindInMap": [
            "Solution",
            "Data",
            "SendAnonymousUsageData"
          ]
        },
        "Yes"
      ]
    }
  },
  "Resources": {
    "bucketsloggingbucketkey7DA570E1": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Logging Bucket Key",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PendingWindowInDays": 30
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "bucketslogging3F0A1C76": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "BucketOwnerFullControl",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "KMSMasterKeyID": {
                  "Fn::GetAtt": [
                    "bucketsloggingbucketkey7DA570E1",
                    "Arn"
                  ]
                },
                "SSEAlgorithm": "aws:kms"
              }
            }
          ]
        },
        "ObjectLockEnabled": true,
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W35",
              "reason": "S3 Bucket should have access logging configured"
            }
          ]
        }
      }
    },
    "bucketsloggingPolicy76782B09": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "bucketslogging3F0A1C76"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*"
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "bucketslogging3F0A1C76",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "bucketslogging3F0A1C76",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "s3:GetBucketAcl",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Resource": {
                "Fn::GetAtt": [
                  "bucketslogging3F0A1C76",
                  "Arn"
                ]
              }
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "bucketslogging3F0A1C76",
                        "Arn"
                      ]
                    },
                    "/AWSLogs/",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "bucketsartifactsbucketkey192CFE4E": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Artifacts Bucket Key",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PendingWindowInDays": 30
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "bucketsartifactsE01AF792": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "BucketOwnerFullControl",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "KMSMasterKeyID": {
                  "Fn::GetAtt": [
                    "bucketsartifactsbucketkey192CFE4E",
                    "Arn"
                  ]
                },
                "SSEAlgorithm": "aws:kms"
              }
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W51",
              "reason": "S3 bucket should likely have a bucket policy"
            },
            {
              "id": "W35",
              "reason": "S3 Bucket should have access logging configured"
            }
          ]
        }
      }
    },
    "bucketsartifactsPolicyCB476A7C": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "bucketsartifactsE01AF792"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*"
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "bucketsartifactsE01AF792",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "bucketsartifactsE01AF792",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "userscriptsSyncUserScriptsLambdaIamPolicy193DFF80": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:List*",
                "s3:Get*",
                "s3:Put*",
                "s3:Delete*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "bucketsartifactsE01AF792"
                    },
                    "/user-scripts/*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "userscriptsSyncUserScriptsLambdaIamPolicy193DFF80",
        "Roles": [
          {
            "Ref": "userscriptsCreateUserScriptsRoleCD14C6F0"
          }
        ]
      }
    },
    "userscriptsCreateUserScriptsRoleCD14C6F0": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      }
    },
    "userscriptsCreateUserScriptsRoleDefaultPolicyBD135BAA": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "bucketsartifactsbucketkey192CFE4E",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "userscriptsCreateUserScriptsRoleDefaultPolicyBD135BAA",
        "Roles": [
          {
            "Ref": "userscriptsCreateUserScriptsRoleCD14C6F0"
          }
        ]
      }
    },
    "userscriptsCreateUserScripts862B2551": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "userscriptsCreateUserScripts862B25518c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Lambda function for custom resource for placing the user scripts in the S3 artifacts bucket",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1"
          }
        },
        "Handler": "sync_user_scripts.event_handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "userscriptsCreateUserScriptsRoleCD14C6F0",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 300
      },
      "DependsOn": [
        "bucketsartifactsPolicyCB476A7C",
        "bucketsartifactsE01AF792",
        "userscriptsCreateUserScriptsRoleDefaultPolicyBD135BAA",
        "userscriptsCreateUserScriptsRoleCD14C6F0"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      }
    },
    "userscriptsuserscriptslambdaalarmuserscriptslambdaalarmthrottlesD5F8865F": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "userscriptsCreateUserScripts862B2551"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      }
    },
    "userscriptsuserscriptslambdaalarmuserscriptslambdaalarmerrorsDB51D412": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "userscriptsCreateUserScripts862B2551"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      }
    },
    "userscriptsUserScriptsCustomResource5469DCC2": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "userscriptsCreateUserScripts862B2551",
            "Arn"
          ]
        },
        "artifacts_bucket_name": {
          "Ref": "bucketsartifactsE01AF792"
        },
        "artifacts_key_prefix": "user-scripts/"
      },
      "DependsOn": [
        "userscriptsSyncUserScriptsLambdaIamPolicy193DFF80"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "Content": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C1848c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        }
      }
    },
    "SolutionsLayerC3651413193": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "Content": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "SolutionsLayerC36514131938c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        }
      }
    },
    "operationalmetricsOperationalMetricsLambdaIamPolicyB5F566A3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:DescribeSecret",
                "secretsmanager:CreateSecret",
                "secretsmanager:DeleteSecret",
                "secretsmanager:UpdateSecret",
                "secretsmanager:PutSecretValue",
                "secretsmanager:GetSecretValue"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:secretsmanager:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":secret:",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-anonymous-metrics-uuid*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "operationalmetricsOperationalMetricsLambdaIamPolicyB5F566A3",
        "Roles": [
          {
            "Ref": "operationalmetricsCreateOperationalMetricsRole22392757"
          }
        ]
      }
    },
    "operationalmetricsCreateOperationalMetricsRole22392757": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      }
    },
    "operationalmetricsCreateOperationalMetrics2F4881C2": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "operationalmetricsCreateOperationalMetrics2F4881C28c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Lambda function for custom resource for the creating anonymous operational metrics uuid in Secrets Manager",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "STACK_NAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Handler": "stack_uuid.event_handler",
        "Layers": [
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "operationalmetricsCreateOperationalMetricsRole22392757",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 300
      },
      "DependsOn": [
        "operationalmetricsCreateOperationalMetricsRole22392757"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      }
    },
    "operationalmetricsoperationalmetricslambdaalarmoperationalmetricslambdaalarmthrottles395CBD05": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "operationalmetricsCreateOperationalMetrics2F4881C2"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      }
    },
    "operationalmetricsoperationalmetricslambdaalarmoperationalmetricslambdaalarmerrorsBEDD486C": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "operationalmetricsCreateOperationalMetrics2F4881C2"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      }
    },
    "operationalmetricsOperationalMetricsCustomResource3C9C5383": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "operationalmetricsCreateOperationalMetrics2F4881C2",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "operationalmetricsOperationalMetricsLambdaIamPolicyB5F566A3"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "cloudwatchmetricsCloudwatchMetricsLambdaIamPolicyA6B3B1A8": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "secretsmanager:GetSecretValue",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:secretsmanager:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":secret:",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-anonymous-metrics-uuid*"
                  ]
                ]
              }
            },
            {
              "Action": "cloudwatch:GetMetricStatistics",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "cloudwatchmetricsCloudwatchMetricsLambdaIamPolicyA6B3B1A8",
        "Roles": [
          {
            "Ref": "cloudwatchmetricsCloudwatchMetricsFunctionRoleCB591803"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      }
    },
    "cloudwatchmetricsCloudwatchMetricsFunctionRoleCB591803": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      }
    },
    "cloudwatchmetricsCloudwatchMetricsFunction8ED78A6A": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "cloudwatchmetricsCloudwatchMetricsFunction8ED78A6A8c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Lambda function for reporting cloudwatch metrics",
        "Environment": {
          "Variables": {
            "STACK_NAME": {
              "Ref": "AWS::StackName"
            },
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights"
          }
        },
        "Handler": "report.event_handler",
        "Layers": [
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "cloudwatchmetricsCloudwatchMetricsFunctionRoleCB591803",
            "Arn"
          ]
        },
        "Runtime": "python3.10",
        "Timeout": 300
      },
      "DependsOn": [
        "cloudwatchmetricsCloudwatchMetricsFunctionRoleCB591803"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      }
    },
    "cloudwatchmetricsCloudwatchMetricsRuleC5490AF6": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Send cloudwatch metrics daily at 5am UTC",
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-send-cloudwatch-metrics"
            ]
          ]
        },
        "ScheduleExpression": "cron(0 5 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "cloudwatchmetricsCloudwatchMetricsFunction8ED78A6A",
                "Arn"
              ]
            },
            "Id": "send-cloudwatch-metrics"
          }
        ]
      }
    },
    "cloudwatchmetricsCloudwatchMetricsPermissions6C860EFF": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "cloudwatchmetricsCloudwatchMetricsFunction8ED78A6A",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "cloudwatchmetricsCloudwatchMetricsRuleC5490AF6",
            "Arn"
          ]
        }
      }
    },
    "cloudtrailS3AndLambda4948E025": {
      "Type": "AWS::CloudTrail::Trail",
      "Properties": {
        "EnableLogFileValidation": true,
        "EventSelectors": [
          {
            "IncludeManagementEvents": true,
            "ReadWriteType": "All"
          }
        ],
        "IncludeGlobalServiceEvents": true,
        "IsLogging": true,
        "IsMultiRegionTrail": true,
        "S3BucketName": {
          "Ref": "bucketslogging3F0A1C76"
        }
      },
      "DependsOn": [
        "bucketsloggingPolicy76782B09"
      ]
    },
    "cloudtrailSetDataEventInTrailF9D241D1": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "cloudtrail:GetEventSelectors",
                "cloudtrail:PutEventSelectors",
                "cloudtrail:GetTrail",
                "cloudtrail:ListTrails",
                "cloudtrail:UpdateTrail"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "cloudtrailS3AndLambda4948E025",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "cloudformation:DescribeStacks",
                "cloudformation:DescribeStackResource"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:cloudformation:*:",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":stack/",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "cloudtrailSetDataEventInTrailF9D241D1",
        "Roles": [
          {
            "Ref": "cloudtrailSetDataEventsRoleA7B28FD1"
          }
        ]
      }
    },
    "cloudtrailSetDataEventsRoleA7B28FD1": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      }
    },
    "cloudtrailSetDataEvents249F6A92": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "cloudtrailSetDataEvents249F6A928c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Lambda function for custom resource to set data events in CloudTrail when Data Lake is deployed",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "CLOUD_TRAIL_ARN": {
              "Fn::GetAtt": [
                "cloudtrailS3AndLambda4948E025",
                "Arn"
              ]
            },
            "ARTIFACTS_BUCKET_ARN": {
              "Fn::GetAtt": [
                "bucketsartifactsE01AF792",
                "Arn"
              ]
            },
            "RAW_BUCKET_LOGICAL_ID": "foundationsrawbucket6964B12D",
            "STAGE_BUCKET_LOGICAL_ID": "foundationsstagebucket7D53680B",
            "ATHENA_BUCKET_LOGICAL_ID": "foundationsathenabucket9F4DB591",
            "LAMBDA_FUNCTION_ARNS_START_WITH": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:lambda:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":function:",
                  {
                    "Ref": "AWS::StackName"
                  },
                  "*"
                ]
              ]
            },
            "STACK_NAME": {
              "Ref": "AWS::StackName"
            },
            "DATA_LAKE_ENABLED": {
              "Ref": "ShouldDeployDataLake"
            }
          }
        },
        "Handler": "trail_data_events.event_handler",
        "Layers": [
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "cloudtrailSetDataEventsRoleA7B28FD1",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 300
      },
      "DependsOn": [
        "cloudtrailSetDataEventsRoleA7B28FD1"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      }
    },
    "cloudtrailsetdataeventswithdatalakelambdaalarmsetdataeventswithdatalakelambdaalarmthrottles0B04EF2C": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "cloudtrailSetDataEvents249F6A92"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      }
    },
    "cloudtrailsetdataeventswithdatalakelambdaalarmsetdataeventswithdatalakelambdaalarmerrorsAF679B47": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "cloudtrailSetDataEvents249F6A92"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      }
    },
    "cloudtrailSetDataEventsCustomResource6DD030CB": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "cloudtrailSetDataEvents249F6A92",
            "Arn"
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "foundationscustomerconfigtablekey4114CC54": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Customer Config DDB Table Key",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PendingWindowInDays": 30
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationscustomerconfigtablekeyAlias6E22BE2A": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "",
            [
              "alias/",
              {
                "Ref": "AWS::StackName"
              },
              "-data-lake-customer-config-dev-ddb-table-key"
            ]
          ]
        },
        "TargetKeyId": {
          "Fn::GetAtt": [
            "foundationscustomerconfigtablekey4114CC54",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationssdlfCustomerConfig45371CE6": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "customer_hash_key",
            "AttributeType": "S"
          },
          {
            "AttributeName": "hash_key",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "amc-index",
            "KeySchema": [
              {
                "AttributeName": "hash_key",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "customer_hash_key",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "hash_key",
            "KeyType": "RANGE"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "foundationscustomerconfigtablekey4114CC54",
              "Arn"
            ]
          },
          "SSEEnabled": true,
          "SSEType": "KMS"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationscustomerconfigtablearn6A562753": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/DynamoDB/DataLake/CustomerConfig"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Ref": "foundationssdlfCustomerConfig45371CE6"
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsmetadatatablekeyA9378A25": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Metadata Table Key",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PendingWindowInDays": 30
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsmetadatatablekeyAlias47EFAC81": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "",
            [
              "alias/",
              {
                "Ref": "AWS::StackName"
              },
              "-octagon-ObjectMetadata-dev-",
              {
                "Ref": "AWS::StackName"
              },
              "-ddb-table-key"
            ]
          ]
        },
        "TargetKeyId": {
          "Fn::GetAtt": [
            "foundationsmetadatatablekeyA9378A25",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsmetadatatable05F0F3CF": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "foundationsmetadatatablekeyA9378A25",
              "Arn"
            ]
          },
          "SSEEnabled": true,
          "SSEType": "KMS"
        },
        "TableName": {
          "Fn::Join": [
            "",
            [
              "octagon-ObjectMetadata-dev-",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "Resource found with an explicit name, this disallows updates that require replacement of this resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsObjectMetadatatablename2FB9E37F": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/DynamoDB/ObjectMetadata"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Ref": "foundationsmetadatatable05F0F3CF"
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsdatasetstablekeyB7FA0C66": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Datasets Table Key",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PendingWindowInDays": 30
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsdatasetstablekeyAlias592E1A18": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "",
            [
              "alias/",
              {
                "Ref": "AWS::StackName"
              },
              "-octagon-Datasets-dev-",
              {
                "Ref": "AWS::StackName"
              },
              "-ddb-table-key"
            ]
          ]
        },
        "TargetKeyId": {
          "Fn::GetAtt": [
            "foundationsdatasetstablekeyB7FA0C66",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsdatasetstableD59647EC": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "name",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "name",
            "KeyType": "HASH"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "foundationsdatasetstablekeyB7FA0C66",
              "Arn"
            ]
          },
          "SSEEnabled": true,
          "SSEType": "KMS"
        },
        "TableName": {
          "Fn::Join": [
            "",
            [
              "octagon-Datasets-dev-",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "Resource found with an explicit name, this disallows updates that require replacement of this resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsDatasetstablename02C5B791": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/DynamoDB/Datasets"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Ref": "foundationsdatasetstableD59647EC"
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationspipelinestablekeyB645FADF": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Pipelines Table Key",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PendingWindowInDays": 30
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationspipelinestablekeyAlias24D96D4B": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "",
            [
              "alias/",
              {
                "Ref": "AWS::StackName"
              },
              "-octagon-Pipelines-dev-",
              {
                "Ref": "AWS::StackName"
              },
              "-ddb-table-key"
            ]
          ]
        },
        "TargetKeyId": {
          "Fn::GetAtt": [
            "foundationspipelinestablekeyB645FADF",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationspipelinestableC835903B": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "name",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "name",
            "KeyType": "HASH"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "foundationspipelinestablekeyB645FADF",
              "Arn"
            ]
          },
          "SSEEnabled": true,
          "SSEType": "KMS"
        },
        "TableName": {
          "Fn::Join": [
            "",
            [
              "octagon-Pipelines-dev-",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "Resource found with an explicit name, this disallows updates that require replacement of this resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsPipelinestablename0EECDA32": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/DynamoDB/Pipelines"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Ref": "foundationspipelinestableC835903B"
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationspehtablekey7888761E": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Peh Table Key",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PendingWindowInDays": 30
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationspehtablekeyAlias4DD1AAD3": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "",
            [
              "alias/",
              {
                "Ref": "AWS::StackName"
              },
              "-octagon-PipelineExecutionHistory-dev-",
              {
                "Ref": "AWS::StackName"
              },
              "-ddb-table-key"
            ]
          ]
        },
        "TargetKeyId": {
          "Fn::GetAtt": [
            "foundationspehtablekey7888761E",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationspehtable62D09842": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "foundationspehtablekey7888761E",
              "Arn"
            ]
          },
          "SSEEnabled": true,
          "SSEType": "KMS"
        },
        "TableName": {
          "Fn::Join": [
            "",
            [
              "octagon-PipelineExecutionHistory-dev-",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "Resource found with an explicit name, this disallows updates that require replacement of this resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsPipelineExecutionHistorytablename1BD0ED04": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/DynamoDB/PipelineExecutionHistory"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Ref": "foundationspehtable62D09842"
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsdatalakelayer1ABD432C": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [
          "python3.9"
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "foundationsdatalakelayer1ABD432C8c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              " Data Lake Library"
            ]
          ]
        },
        "LayerName": "data-lake-library",
        "LicenseInfo": "Apache-2.0"
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsRegisterFunctionRoleC51E3846": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsRegisterFunctionRoleDefaultPolicyBC3AB18E": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "foundationsdatasetstablekeyB7FA0C66",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "foundationsdatasetstableD59647EC",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "foundationspipelinestablekeyB645FADF",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "foundationspipelinestableC835903B",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "foundationsRegisterFunctionRoleDefaultPolicyBC3AB18E",
        "Roles": [
          {
            "Ref": "foundationsRegisterFunctionRoleC51E3846"
          }
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsRegisterFunction3F085383": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "foundationsRegisterFunction3F0853838c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Registers Datasets, Pipelines and Stages into their respective DynamoDB tables",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "OCTAGON_DATASET_TABLE_NAME": {
              "Ref": "foundationsdatasetstableD59647EC"
            },
            "OCTAGON_PIPELINE_TABLE_NAME": {
              "Ref": "foundationspipelinestableC835903B"
            }
          }
        },
        "Handler": "handler.event_handler",
        "Layers": [
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "foundationsRegisterFunctionRoleC51E3846",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "foundationsRegisterFunctionRoleDefaultPolicyBC3AB18E",
        "foundationsRegisterFunctionRoleC51E3846",
        "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsregisterfunctionlambdaalarmregisterfunctionlambdaalarmthrottlesC9168151": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "foundationsRegisterFunction3F085383"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsregisterfunctionlambdaalarmregisterfunctionlambdaalarmerrors205F0F58": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "foundationsRegisterFunction3F085383"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationslakeformationbucketregistryroleA1FEC241": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lakeformation.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:ListBucket",
                  "Condition": {
                    "StringEquals": {
                      "aws:ResourceAccount": [
                        {
                          "Ref": "AWS::AccountId"
                        }
                      ]
                    }
                  },
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":s3:::",
                        {
                          "Ref": "AWS::StackName"
                        },
                        "*"
                      ]
                    ]
                  }
                },
                {
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:DeleteObject"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "aws:ResourceAccount": [
                        {
                          "Ref": "AWS::AccountId"
                        }
                      ]
                    }
                  },
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":s3:::",
                        {
                          "Ref": "AWS::StackName"
                        },
                        "*/*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LakeFormationDataAccessPolicyForS3"
          }
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsrawbucketkey4CF96398": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Raw Bucket Key",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*"
            },
            {
              "Action": [
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "foundationslakeformationbucketregistryroleA1FEC241",
                    "Arn"
                  ]
                }
              },
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PendingWindowInDays": 30
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsrawbucketkeyarn4FE526B0": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/KMS/RawBucketKeyArn"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "foundationsrawbucketkey4CF96398",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsrawbucket6964B12D": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "BucketOwnerFullControl",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "KMSMasterKeyID": {
                  "Fn::GetAtt": [
                    "foundationsrawbucketkey4CF96398",
                    "Arn"
                  ]
                },
                "SSEAlgorithm": "aws:kms"
              }
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W51",
              "reason": "S3 bucket should likely have a bucket policy"
            },
            {
              "id": "W35",
              "reason": "S3 Bucket should have access logging configured"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsrawbucketPolicy5BA3DA11": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "foundationsrawbucket6964B12D"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*"
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "foundationsrawbucket6964B12D",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "foundationsrawbucket6964B12D",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsrawbucketname6E5C0778": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/S3/RawBucket"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Ref": "foundationsrawbucket6964B12D"
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsrawbucketlakeformationregistryCD724B37": {
      "Type": "AWS::LakeFormation::Resource",
      "Properties": {
        "ResourceArn": {
          "Fn::GetAtt": [
            "foundationsrawbucket6964B12D",
            "Arn"
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "foundationslakeformationbucketregistryroleA1FEC241",
            "Arn"
          ]
        },
        "UseServiceLinkedRole": false
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsstagebucketkey2FA5FAF2": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Stage Bucket Key",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*"
            },
            {
              "Action": [
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "foundationslakeformationbucketregistryroleA1FEC241",
                    "Arn"
                  ]
                }
              },
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PendingWindowInDays": 30
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsstagebucketkeyarn759ED0AC": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/KMS/StageBucketKeyArn"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "foundationsstagebucketkey2FA5FAF2",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsstagebucket7D53680B": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "BucketOwnerFullControl",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "KMSMasterKeyID": {
                  "Fn::GetAtt": [
                    "foundationsstagebucketkey2FA5FAF2",
                    "Arn"
                  ]
                },
                "SSEAlgorithm": "aws:kms"
              }
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W51",
              "reason": "S3 bucket should likely have a bucket policy"
            },
            {
              "id": "W35",
              "reason": "S3 Bucket should have access logging configured"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsstagebucketPolicyE6C1691F": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "foundationsstagebucket7D53680B"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*"
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "foundationsstagebucket7D53680B",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "foundationsstagebucket7D53680B",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsstagebucketname20E53D73": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/S3/StageBucket"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Ref": "foundationsstagebucket7D53680B"
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsstagebucketlakeformationregistry53D6C4DF": {
      "Type": "AWS::LakeFormation::Resource",
      "Properties": {
        "ResourceArn": {
          "Fn::GetAtt": [
            "foundationsstagebucket7D53680B",
            "Arn"
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "foundationslakeformationbucketregistryroleA1FEC241",
            "Arn"
          ]
        },
        "UseServiceLinkedRole": false
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsathenabucketkey78C4A13F": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Athena Bucket Key",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*"
            },
            {
              "Action": [
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "foundationslakeformationbucketregistryroleA1FEC241",
                    "Arn"
                  ]
                }
              },
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PendingWindowInDays": 30
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsathenabucketkeyarn593B0257": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/KMS/AthenaBucketKeyArn"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "foundationsathenabucketkey78C4A13F",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsathenabucket9F4DB591": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "BucketOwnerFullControl",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "KMSMasterKeyID": {
                  "Fn::GetAtt": [
                    "foundationsathenabucketkey78C4A13F",
                    "Arn"
                  ]
                },
                "SSEAlgorithm": "aws:kms"
              }
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W51",
              "reason": "S3 bucket should likely have a bucket policy"
            },
            {
              "id": "W35",
              "reason": "S3 Bucket should have access logging configured"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsathenabucketPolicy1C1AE6C0": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "foundationsathenabucket9F4DB591"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*"
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "foundationsathenabucket9F4DB591",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "foundationsathenabucket9F4DB591",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsathenabucketnameA32A2FBA": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/S3/AthenaBucket"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Ref": "foundationsathenabucket9F4DB591"
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsathenabucketlakeformationregistryC0E3D459": {
      "Type": "AWS::LakeFormation::Resource",
      "Properties": {
        "ResourceArn": {
          "Fn::GetAtt": [
            "foundationsathenabucket9F4DB591",
            "Arn"
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "foundationslakeformationbucketregistryroleA1FEC241",
            "Arn"
          ]
        },
        "UseServiceLinkedRole": false
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinemetricslayer17628E3F": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [
          "python3.9"
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakepipelinemetricslayer17628E3F8c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "LayerName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-metrics-layer"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinedatalakeroutingServiceRoleBFC0CCB0": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "DependsOn": [
        "foundationsdatasetstableD59647EC",
        "foundationsmetadatatable05F0F3CF",
        "foundationssdlfCustomerConfig45371CE6"
      ],
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinedatalakeroutingBEE8F1BC": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakepipelinedatalakeroutingBEE8F1BC8c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Routes to the right team and pipeline",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "ENV": "dev",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "SDLF_CUSTOMER_CONFIG": {
              "Ref": "foundationssdlfCustomerConfig45371CE6"
            },
            "OCTAGON_DATASET_TABLE_NAME": {
              "Ref": "foundationsdatasetstableD59647EC"
            },
            "OCTAGON_METADATA_TABLE_NAME": {
              "Ref": "foundationsmetadatatable05F0F3CF"
            },
            "METRICS_NAMESPACE": "amcinsights",
            "STACK_NAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-data-lake-routing"
            ]
          ]
        },
        "Handler": "handler.lambda_handler",
        "Layers": [
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "datalakepipelinemetricslayer17628E3F"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "datalakepipelinedatalakeroutingServiceRoleBFC0CCB0",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "datalakepipelinedatalakeroutingServiceRoleBFC0CCB0",
        "foundationsdatasetstableD59647EC",
        "foundationsmetadatatable05F0F3CF",
        "foundationssdlfCustomerConfig45371CE6"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinedatalakeroutinginvokelambda38858C0A": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "datalakepipelinedatalakeroutingBEE8F1BC",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com"
      },
      "DependsOn": [
        "foundationsdatasetstableD59647EC",
        "foundationsmetadatatable05F0F3CF",
        "foundationssdlfCustomerConfig45371CE6"
      ],
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinedatalakeroutinglambdaalarmdatalakeroutinglambdaalarmthrottles4BAE9C7C": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinedatalakeroutingBEE8F1BC"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinedatalakeroutinglambdaalarmdatalakeroutinglambdaalarmerrors784EA19C": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinedatalakeroutingBEE8F1BC"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelineroutingqueuearnABF9DD37": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/Lambda/RoutingQueueArn"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "datalakepipelinedatalakeroutingBEE8F1BC",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelineroutingfunctionrolepolicy63273845": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "foundationssdlfCustomerConfig45371CE6",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "foundationssdlfCustomerConfig45371CE6",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "foundationsmetadatatable05F0F3CF",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "foundationsmetadatatable05F0F3CF",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "foundationsdatasetstableD59647EC",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "foundationsdatasetstableD59647EC",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:ReEncryptTo",
                "kms:ReEncryptFrom",
                "kms:ListAliases",
                "kms:ListKeys"
              ],
              "Condition": {
                "ForAnyValue:StringLike": {
                  "kms:ResourceAliases": "alias/*"
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "sqs:SendMessage",
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage",
                "sqs:GetQueueAttributes",
                "sqs:ListQueues",
                "sqs:GetQueueUrl",
                "sqs:ListDeadLetterSourceQueues",
                "sqs:ListQueueTags"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sqs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:GetParametersByPath"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":parameter/",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "amcinsights"
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "datalakepipelineroutingfunctionrolepolicy63273845",
        "Roles": [
          {
            "Ref": "datalakepipelinedatalakeroutingServiceRoleBFC0CCB0"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelineraws3bucketeventcapture54605E5C": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Capture data landing in the raw s3 bucket",
        "EventPattern": {
          "detail": {
            "eventSource": [
              "s3.amazonaws.com"
            ],
            "eventName": [
              "CopyObject",
              "CompleteMultipartUpload",
              "PutObject",
              "DeleteObject"
            ],
            "requestParameters": {
              "bucketName": [
                {
                  "Ref": "foundationsrawbucket6964B12D"
                }
              ]
            }
          },
          "source": [
            "aws.s3"
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-raw-bucket-s3-event-capture"
            ]
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "datalakepipelinedatalakeroutingBEE8F1BC",
                "Arn"
              ]
            },
            "Id": "Target0"
          }
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelineraws3bucketeventcaptureAllowEventRuleamcinsightsdatalakepipelinedatalakerouting459ED237DAF3781F": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "datalakepipelinedatalakeroutingBEE8F1BC",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "datalakepipelineraws3bucketeventcapture54605E5C",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageasdlfstageaoctagonpipelineregistersdlfstageaoctagonpipelinecustomresource5E921712": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "foundationsRegisterFunction3F085383",
            "Arn"
          ]
        },
        "RegisterProperties": {
          "version": 1,
          "status": "ACTIVE",
          "name": "adtech-insights-stage-a",
          "type": "octagon_pipeline",
          "description": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AWS::StackName"
                },
                " data lake light transform"
              ]
            ]
          },
          "id": "sdlf-stage-a"
        }
      },
      "DependsOn": [
        "foundationsRegisterFunction3F085383"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageasqskeya39EACD45": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "SQS Key Stage A",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PendingWindowInDays": 30
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageasqskeyaAlias9A78F494": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "",
            [
              "alias/",
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-sqs-stage-a-key"
            ]
          ]
        },
        "TargetKeyId": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstageasqskeya39EACD45",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageaamcdlqa85D83008": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "FifoQueue": true,
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstageasqskeya39EACD45",
            "Arn"
          ]
        },
        "QueueName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-dlq-a.fifo"
            ]
          ]
        },
        "VisibilityTimeout": 60
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageaalarmdlqa072BBC43": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "CloudWatch Alarm for Routing DLQ A",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "QueueName",
            "Value": {
              "Fn::GetAtt": [
                "datalakepipelinesdlfstageaamcdlqa85D83008",
                "QueueName"
              ]
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "ApproximateNumberOfMessagesVisible",
        "Namespace": "AWS/SQS",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageaamcdlqafifossm20164E76": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/SQS/adtech/insightsStageADLQ"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-dlq-a.fifo"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageaqueuea8ED996E2": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "ContentBasedDeduplication": true,
        "FifoQueue": true,
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstageasqskeya39EACD45",
            "Arn"
          ]
        },
        "QueueName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-queue-a.fifo"
            ]
          ]
        },
        "RedrivePolicy": {
          "deadLetterTargetArn": {
            "Fn::GetAtt": [
              "datalakepipelinesdlfstageaamcdlqa85D83008",
              "Arn"
            ]
          },
          "maxReceiveCount": 1
        },
        "VisibilityTimeout": 60
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageaamcqueueafifossm4F10C6A7": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/SQS/adtech/insightsStageAQueue"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-queue-a.fifo"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagearoutingaServiceRole44E344DF": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "DependsOn": [
        "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
      ],
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagearoutingaServiceRoleDefaultPolicy46BC39A2": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "amcinsights"
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "datalakepipelinesdlfstageaqueuea8ED996E2",
                  "Arn"
                ]
              }
            },
            {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "datalakepipelinesdlfstageasqskeya39EACD45",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "datalakepipelinesdlfstagearoutingaServiceRoleDefaultPolicy46BC39A2",
        "Roles": [
          {
            "Ref": "datalakepipelinesdlfstagearoutingaServiceRole44E344DF"
          }
        ]
      },
      "DependsOn": [
        "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagearoutingaB08E6EDB": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakepipelinesdlfstagearoutingaB08E6EDB8c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Triggers Step Function",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "METRICS_NAMESPACE": "amcinsights",
            "STACK_NAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-routing-a"
            ]
          ]
        },
        "Handler": "handler.lambda_handler",
        "Layers": [
          {
            "Ref": "foundationsdatalakelayer1ABD432C"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "datalakepipelinesdlfstageametricslayerAFC8882A"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstagearoutingaServiceRole44E344DF",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "datalakepipelinesdlfstagearoutingaServiceRoleDefaultPolicy46BC39A2",
        "datalakepipelinesdlfstagearoutingaServiceRole44E344DF",
        "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagearoutingaSqsEventSourceamcinsightsdatalakepipelinesdlfstageaqueueaF3B053C4670149E7": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstageaqueuea8ED996E2",
            "Arn"
          ]
        },
        "FunctionName": {
          "Ref": "datalakepipelinesdlfstagearoutingaB08E6EDB"
        }
      },
      "DependsOn": [
        "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
      ],
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagearoutingalambdaalarmroutingalambdaalarmthrottles8744BF49": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstagearoutingaB08E6EDB"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagearoutingalambdaalarmroutingalambdaalarmerrors4AB28C5C": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstagearoutingaB08E6EDB"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagearedriveaServiceRoleE5EE8A85": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "DependsOn": [
        "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
      ],
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagearedriveaC22F90F4": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakepipelinesdlfstagearedriveaC22F90F48c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Redrive Step Function stageA",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "TEAM": "adtech",
            "PIPELINE": "insights",
            "STAGE": "StageA",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-redrive-a"
            ]
          ]
        },
        "Handler": "handler.lambda_handler",
        "Layers": [
          {
            "Ref": "foundationsdatalakelayer1ABD432C"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "datalakepipelinesdlfstageametricslayerAFC8882A"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstagearedriveaServiceRoleE5EE8A85",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "datalakepipelinesdlfstagearedriveaServiceRoleE5EE8A85",
        "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagearedrivealambdaalarmredrivealambdaalarmthrottlesE1594367": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstagearedriveaC22F90F4"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagearedrivealambdaalarmredrivealambdaalarmerrorsD16A8312": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstagearedriveaC22F90F4"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageapostupdateaServiceRole0C59D002": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "DependsOn": [
        "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
      ],
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageapostupdatea289CA198": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakepipelinesdlfstageapostupdatea289CA1988c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "post update metadata",
        "Environment": {
          "Variables": {
            "stage_bucket": {
              "Ref": "foundationsstagebucket7D53680B"
            },
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-postupdate-a"
            ]
          ]
        },
        "Handler": "handler.lambda_handler",
        "Layers": [
          {
            "Ref": "foundationsdatalakelayer1ABD432C"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "datalakepipelinesdlfstageametricslayerAFC8882A"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstageapostupdateaServiceRole0C59D002",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "datalakepipelinesdlfstageapostupdateaServiceRole0C59D002",
        "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageapostupdatealambdaalarmpostupdatealambdaalarmthrottles0391AEDF": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstageapostupdatea289CA198"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageapostupdatealambdaalarmpostupdatealambdaalarmerrorsC9E13B69": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstageapostupdatea289CA198"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageapreupdateaServiceRole42302392": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "DependsOn": [
        "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
      ],
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageapreupdatea23A36FE3": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakepipelinesdlfstageapreupdatea23A36FE38c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "preupdate metadata",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-preupdate-a"
            ]
          ]
        },
        "Handler": "handler.lambda_handler",
        "Layers": [
          {
            "Ref": "foundationsdatalakelayer1ABD432C"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "datalakepipelinesdlfstageametricslayerAFC8882A"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstageapreupdateaServiceRole42302392",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "datalakepipelinesdlfstageapreupdateaServiceRole42302392",
        "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageapreupdatealambdaalarmpreupdatealambdaalarmthrottles5653E608": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstageapreupdatea23A36FE3"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageapreupdatealambdaalarmpreupdatealambdaalarmerrors4AD007D4": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstageapreupdatea23A36FE3"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageaerroraServiceRoleF8E0443C": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "DependsOn": [
        "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
      ],
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageaerrora34F9DAA3": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakepipelinesdlfstageaerrora34F9DAA38c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "send errors to DLQ",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-error-a"
            ]
          ]
        },
        "Handler": "handler.lambda_handler",
        "Layers": [
          {
            "Ref": "foundationsdatalakelayer1ABD432C"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "datalakepipelinesdlfstageametricslayerAFC8882A"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstageaerroraServiceRoleF8E0443C",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "datalakepipelinesdlfstageaerroraServiceRoleF8E0443C",
        "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageaerroralambdaalarmerroralambdaalarmthrottles110C77D6": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstageaerrora34F9DAA3"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageaerroralambdaalarmerroralambdaalarmerrorsA4266E7B": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstageaerrora34F9DAA3"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageaprocessaServiceRole15419483": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "DependsOn": [
        "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
      ],
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageaprocessaServiceRoleDefaultPolicy6D2D4451": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "foundationsrawbucketkey4CF96398",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "foundationsrawbucket6964B12D",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "foundationsrawbucket6964B12D",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "foundationsrawbucketkey4CF96398",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "foundationsstagebucketkey2FA5FAF2",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "foundationsstagebucket7D53680B",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "foundationsstagebucket7D53680B",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:Decrypt"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "foundationsstagebucketkey2FA5FAF2",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "datalakepipelinesdlfstageaprocessaServiceRoleDefaultPolicy6D2D4451",
        "Roles": [
          {
            "Ref": "datalakepipelinesdlfstageaprocessaServiceRole15419483"
          }
        ]
      },
      "DependsOn": [
        "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageaprocessa9C0A11A6": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakepipelinesdlfstageaprocessa9C0A11A68c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "executes lights transform",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-process-a"
            ]
          ]
        },
        "Handler": "handler.lambda_handler",
        "Layers": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:lambda:",
                {
                  "Ref": "AWS::Region"
                },
                ":336392948345:layer:AWSSDKPandas-Python39-Arm64:6"
              ]
            ]
          },
          {
            "Ref": "foundationsdatalakelayer1ABD432C"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "datalakepipelinesdlfstageametricslayerAFC8882A"
          }
        ],
        "MemorySize": 1536,
        "Role": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstageaprocessaServiceRole15419483",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 900
      },
      "DependsOn": [
        "datalakepipelinesdlfstageaprocessaServiceRoleDefaultPolicy6D2D4451",
        "datalakepipelinesdlfstageaprocessaServiceRole15419483",
        "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageaprocessalambdaalarmprocessalambdaalarmthrottles7DD9F630": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstageaprocessa9C0A11A6"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageaprocessalambdaalarmprocessalambdaalarmerrorsA8CB4B1A": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstageaprocessa9C0A11A6"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageametricslayerAFC8882A": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [
          "python3.9"
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakepipelinesdlfstageametricslayerAFC8882A8c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "LayerName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-metrics-layer"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagealambdas3policy2B53A223": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:Get*",
                "s3:List*",
                "s3-object-lambda:Get*",
                "s3-object-lambda:List*"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": [
                    {
                      "Ref": "AWS::AccountId"
                    }
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": [
                "arn:aws:s3:::amc*",
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "datalakepipelinesdlfstagealambdas3policy2B53A223",
        "Roles": [
          {
            "Ref": "datalakepipelinesdlfstageaprocessaServiceRole15419483"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageasdlflighttransformlambdaspolicy4B7303C3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:states:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":stateMachine:",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-adtech-insights-sm-a"
                  ]
                ]
              }
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:ReEncryptTo",
                "kms:ReEncryptFrom",
                "kms:ListAliases",
                "kms:ListKeys"
              ],
              "Condition": {
                "ForAnyValue:StringLike": {
                  "kms:ResourceAliases": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "alias/",
                          {
                            "Ref": "AWS::StackName"
                          },
                          "-*"
                        ]
                      ]
                    },
                    "alias/tps-*"
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:kms:*:",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":key/*"
                  ]
                ]
              }
            },
            {
              "Action": "s3:GetObject",
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": [
                    {
                      "Ref": "AWS::AccountId"
                    }
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "foundationsstagebucket7D53680B"
                    },
                    "/pre-stage/adtech/*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":table/octagon-*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":table/",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "-*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:GetParametersByPath"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":parameter/",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "sqs:SendMessage",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
                "sqs:ListQueues",
                "sqs:GetQueueUrl",
                "sqs:ListDeadLetterSourceQueues",
                "sqs:ListQueueTags"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sqs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-adtech-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "datalakepipelinesdlfstageasdlflighttransformlambdaspolicy4B7303C3",
        "Roles": [
          {
            "Ref": "datalakepipelinesdlfstagearoutingaServiceRole44E344DF"
          },
          {
            "Ref": "datalakepipelinesdlfstageapostupdateaServiceRole0C59D002"
          },
          {
            "Ref": "datalakepipelinesdlfstageapreupdateaServiceRole42302392"
          },
          {
            "Ref": "datalakepipelinesdlfstageaprocessaServiceRole15419483"
          },
          {
            "Ref": "datalakepipelinesdlfstageaerroraServiceRoleF8E0443C"
          },
          {
            "Ref": "datalakepipelinesdlfstagearedriveaServiceRoleE5EE8A85"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageaPutCloudWatchMetricsPolicyFC4D49DE": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "amcinsights"
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "datalakepipelinesdlfstageaPutCloudWatchMetricsPolicyFC4D49DE",
        "Roles": [
          {
            "Ref": "datalakepipelinesdlfstagearoutingaServiceRole44E344DF"
          },
          {
            "Ref": "datalakepipelinesdlfstageapostupdateaServiceRole0C59D002"
          },
          {
            "Ref": "datalakepipelinesdlfstageapreupdateaServiceRole42302392"
          },
          {
            "Ref": "datalakepipelinesdlfstageaprocessaServiceRole15419483"
          },
          {
            "Ref": "datalakepipelinesdlfstageaerroraServiceRoleF8E0443C"
          },
          {
            "Ref": "datalakepipelinesdlfstagearedriveaServiceRoleE5EE8A85"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageasdlflightsmaloggroup496A8EB2": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/vendedlogs/states/",
              {
                "Ref": "AWS::StackName"
              },
              "-sdlf-light-",
              {
                "Fn::Select": [
                  2,
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId"
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "CloudWatchLogs LogGroup should specify a KMS Key Id to encrypt the log data"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageasdlflightsfnjobroleAD3BF438": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "states.",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".amazonaws.com"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageasdlflightsfnjobpolicyCCF23F91": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:lambda:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":function:",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-adtech-insights-*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "logs:CreateLogDelivery",
                "logs:CreateLogStream",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutLogEvents",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "Roles": [
          {
            "Ref": "datalakepipelinesdlfstageasdlflightsfnjobroleAD3BF438"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W13",
              "reason": "IAM managed policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageasdlflightsmaC45D0F14": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{\n    \"Comment\": \"Simple pseudo flow\",\n    \"StartAt\": \"Try\",\n    \"States\": {\n        \"Try\": {\n            \"Type\": \"Parallel\",\n            \"Branches\": [\n                {\n                    \"StartAt\": \"Pre-update Comprehensive Catalogue\",\n                    \"States\": {\n                        \"Pre-update Comprehensive Catalogue\": {\n                            \"Type\": \"Task\",\n                            \"Resource\": \"",
              {
                "Fn::GetAtt": [
                  "datalakepipelinesdlfstageapreupdatea23A36FE3",
                  "Arn"
                ]
              },
              "\",\n                            \"Comment\": \"Pre-update Comprehensive Catalogue\",\n                            \"Next\": \"Execute Light Transformation\"\n                        },\n                        \"Execute Light Transformation\": {\n                            \"Type\": \"Task\",\n                            \"Resource\": \"",
              {
                "Fn::GetAtt": [
                  "datalakepipelinesdlfstageaprocessa9C0A11A6",
                  "Arn"
                ]
              },
              "\",\n                            \"Comment\": \"Execute Light Transformation\",\n                            \"ResultPath\": \"$.body.processedKeys\",\n                            \"Next\": \"Post-update comprehensive Catalogue\"\n                        },\n                        \"Post-update comprehensive Catalogue\": {\n                            \"Type\": \"Task\",\n                            \"Resource\": \"",
              {
                "Fn::GetAtt": [
                  "datalakepipelinesdlfstageapostupdatea289CA198",
                  "Arn"
                ]
              },
              "\",\n                            \"Comment\": \"Post-update comprehensive Catalogue\",\n                            \"ResultPath\": \"$.statusCode\",\n                            \"End\": true\n                        }\n                    }\n                }\n            ],\n            \"Catch\": [\n                {\n                    \"ErrorEquals\": [\n                        \"States.ALL\"\n                    ],\n                    \"ResultPath\": null,\n                    \"Next\": \"Error\"\n                }\n            ],\n            \"Next\": \"Done\"\n        },\n        \"Done\": {\n            \"Type\": \"Succeed\"\n        },\n        \"Error\": {\n            \"Type\": \"Task\",\n            \"Resource\": \"",
              {
                "Fn::GetAtt": [
                  "datalakepipelinesdlfstageaerrora34F9DAA3",
                  "Arn"
                ]
              },
              "\",\n            \"Comment\": \"Send Original Payload to DLQ\",\n            \"Next\": \"Failed\"\n        },\n        \"Failed\": {\n            \"Type\": \"Fail\"\n        }\n    }\n}"
            ]
          ]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": [
                    "datalakepipelinesdlfstageasdlflightsmaloggroup496A8EB2",
                    "Arn"
                  ]
                }
              }
            }
          ],
          "IncludeExecutionData": false,
          "Level": "ALL"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstageasdlflightsfnjobroleAD3BF438",
            "Arn"
          ]
        },
        "StateMachineName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-sm-a"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageasdlflightsmaarn4136F2A9": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/SM/adtech/insightsStageASM"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstageasdlflightsmaC45D0F14",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinestagearolename316BD4AA": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/Lambda/StageARoleName"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Ref": "datalakepipelinesdlfstageaprocessaServiceRole15419483"
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebsdlfstageboctagonpipelineregistersdlfstageboctagonpipelinecustomresourceB8DE82CD": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "foundationsRegisterFunction3F085383",
            "Arn"
          ]
        },
        "RegisterProperties": {
          "version": 1,
          "status": "ACTIVE",
          "name": "adtech-insights-stage-b",
          "type": "octagon_pipeline",
          "description": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AWS::StackName"
                },
                " data lake heavy transform"
              ]
            ]
          },
          "id": "sdlf-stage-b"
        }
      },
      "DependsOn": [
        "foundationsRegisterFunction3F085383"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebroutingbServiceRole287E506F": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebroutingb79B66B3D": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakepipelinesdlfstagebroutingb79B66B3D8c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Triggers Step Function stageB",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "METRICS_NAMESPACE": "amcinsights",
            "STACK_NAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-routing-b"
            ]
          ]
        },
        "Handler": "handler.lambda_handler",
        "Layers": [
          {
            "Ref": "foundationsdatalakelayer1ABD432C"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "datalakepipelinesdlfstagebmetricslayer1767C271"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstagebroutingbServiceRole287E506F",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "datalakepipelinesdlfstagebroutingbServiceRole287E506F"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebroutingblambdaalarmroutingblambdaalarmthrottlesC1649819": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstagebroutingb79B66B3D"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebroutingblambdaalarmroutingblambdaalarmerrorsB59CE450": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstagebroutingb79B66B3D"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebredrivebServiceRole4211F800": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebredriveb11AB27D5": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakepipelinesdlfstagebredriveb11AB27D58c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Redrive Step Function stageB",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "TEAM": "adtech",
            "PIPELINE": "insights",
            "STAGE": "StageB",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "METRICS_NAMESPACE": "amcinsights",
            "STACK_NAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-redrive-b"
            ]
          ]
        },
        "Handler": "handler.lambda_handler",
        "Layers": [
          {
            "Ref": "foundationsdatalakelayer1ABD432C"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "datalakepipelinesdlfstagebmetricslayer1767C271"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstagebredrivebServiceRole4211F800",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "datalakepipelinesdlfstagebredrivebServiceRole4211F800"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebredriveblambdaalarmredriveblambdaalarmthrottles97FB3742": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstagebredriveb11AB27D5"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebredriveblambdaalarmredriveblambdaalarmerrorsCC95C8A2": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstagebredriveb11AB27D5"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebpostupdatebServiceRoleB7CAF220": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebpostupdateb6707B936": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakepipelinesdlfstagebpostupdateb6707B9368c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "post update metadata",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "METRICS_NAMESPACE": "amcinsights",
            "STACK_NAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-postupdate-b"
            ]
          ]
        },
        "Handler": "handler.lambda_handler",
        "Layers": [
          {
            "Ref": "foundationsdatalakelayer1ABD432C"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "datalakepipelinesdlfstagebmetricslayer1767C271"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstagebpostupdatebServiceRoleB7CAF220",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "datalakepipelinesdlfstagebpostupdatebServiceRoleB7CAF220"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebpostupdateblambdaalarmpostupdateblambdaalarmthrottles0756B8B3": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstagebpostupdateb6707B936"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebpostupdateblambdaalarmpostupdateblambdaalarmerrors078E3B7D": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstagebpostupdateb6707B936"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebcheckjobbServiceRole83E27FB1": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebcheckjobbD6F191BF": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakepipelinesdlfstagebcheckjobbD6F191BF8c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "check if glue job still running",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "METRICS_NAMESPACE": "amcinsights",
            "STACK_NAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-checkjob-b"
            ]
          ]
        },
        "Handler": "handler.lambda_handler",
        "Layers": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:lambda:",
                {
                  "Ref": "AWS::Region"
                },
                ":336392948345:layer:AWSSDKPandas-Python39-Arm64:6"
              ]
            ]
          },
          {
            "Ref": "foundationsdatalakelayer1ABD432C"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "datalakepipelinesdlfstagebmetricslayer1767C271"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstagebcheckjobbServiceRole83E27FB1",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "datalakepipelinesdlfstagebcheckjobbServiceRole83E27FB1"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebcheckjobblambdaalarmcheckjobblambdaalarmthrottles6D558661": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstagebcheckjobbD6F191BF"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebcheckjobblambdaalarmcheckjobblambdaalarmerrors440BBF9E": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstagebcheckjobbD6F191BF"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageberrorbServiceRoleA6C8B8C9": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageberrorb751BFF1D": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakepipelinesdlfstageberrorb751BFF1D8c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "send errors to DLQ",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "METRICS_NAMESPACE": "amcinsights",
            "STACK_NAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-error-b"
            ]
          ]
        },
        "Handler": "handler.lambda_handler",
        "Layers": [
          {
            "Ref": "foundationsdatalakelayer1ABD432C"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "datalakepipelinesdlfstagebmetricslayer1767C271"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstageberrorbServiceRoleA6C8B8C9",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "datalakepipelinesdlfstageberrorbServiceRoleA6C8B8C9"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageberrorblambdaalarmerrorblambdaalarmthrottlesD462D941": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstageberrorb751BFF1D"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstageberrorblambdaalarmerrorblambdaalarmerrorsFF291DBF": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstageberrorb751BFF1D"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebprocessbServiceRole4152F9A6": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebprocessbServiceRoleDefaultPolicy59524D08": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "foundationsstagebucketkey2FA5FAF2",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "foundationsstagebucket7D53680B",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "foundationsstagebucket7D53680B",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "foundationsstagebucketkey2FA5FAF2",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "foundationsstagebucketkey2FA5FAF2",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "foundationsstagebucket7D53680B",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "foundationsstagebucket7D53680B",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:Decrypt"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "foundationsstagebucketkey2FA5FAF2",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "datalakepipelinesdlfstagebprocessbServiceRoleDefaultPolicy59524D08",
        "Roles": [
          {
            "Ref": "datalakepipelinesdlfstagebprocessbServiceRole4152F9A6"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebprocessb1857E732": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakepipelinesdlfstagebprocessb1857E7328c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "execute heavy transform",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "METRICS_NAMESPACE": "amcinsights",
            "STACK_NAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-process-b"
            ]
          ]
        },
        "Handler": "handler.lambda_handler",
        "Layers": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:lambda:",
                {
                  "Ref": "AWS::Region"
                },
                ":336392948345:layer:AWSSDKPandas-Python39-Arm64:6"
              ]
            ]
          },
          {
            "Ref": "foundationsdatalakelayer1ABD432C"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "datalakepipelinesdlfstagebmetricslayer1767C271"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstagebprocessbServiceRole4152F9A6",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 900
      },
      "DependsOn": [
        "datalakepipelinesdlfstagebprocessbServiceRoleDefaultPolicy59524D08",
        "datalakepipelinesdlfstagebprocessbServiceRole4152F9A6"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebprocessblambdaalarmprocessblambdaalarmthrottles658C1D89": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstagebprocessb1857E732"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebprocessblambdaalarmprocessblambdaalarmerrors8632D233": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakepipelinesdlfstagebprocessb1857E732"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebmetricslayer1767C271": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [
          "python3.9"
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakepipelinesdlfstagebmetricslayer1767C2718c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "LayerName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-metrics-layer"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebsdlfheavytransformlambdaspolicy4E17F736": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:states:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":stateMachine:",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-adtech-insights-sm-b"
                  ]
                ]
              }
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:ReEncryptTo",
                "kms:ReEncryptFrom",
                "kms:ListAliases",
                "kms:ListKeys"
              ],
              "Condition": {
                "ForAnyValue:StringLike": {
                  "kms:ResourceAliases": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "alias/",
                          {
                            "Ref": "AWS::StackName"
                          },
                          "-*"
                        ]
                      ]
                    },
                    "alias/tps-*"
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:kms:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":key/*"
                  ]
                ]
              }
            },
            {
              "Action": "glue:StartCrawler",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:glue:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":crawler/",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-adtech-*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "glue:StartJobRun",
                "glue:GetJobRun"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:glue:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":job/",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-adtech-*"
                  ]
                ]
              }
            },
            {
              "Action": "s3:ListBucket",
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": [
                    {
                      "Ref": "AWS::AccountId"
                    }
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "foundationsstagebucket7D53680B",
                  "Arn"
                ]
              }
            },
            {
              "Action": "s3:GetObject",
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": [
                    {
                      "Ref": "AWS::AccountId"
                    }
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "foundationsstagebucket7D53680B"
                      },
                      "/pre-stage/adtech/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "foundationsstagebucket7D53680B"
                      },
                      "/post-stage/adtech/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":table/octagon-*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":table/",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "-*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:GetParametersByPath"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":parameter/",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "sqs:SendMessage",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
                "sqs:ListQueues",
                "sqs:GetQueueUrl",
                "sqs:ListDeadLetterSourceQueues",
                "sqs:ListQueueTags"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sqs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-adtech-*"
                  ]
                ]
              }
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "amcinsights"
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "datalakepipelinesdlfstagebsdlfheavytransformlambdaspolicy4E17F736",
        "Roles": [
          {
            "Ref": "datalakepipelinesdlfstagebroutingbServiceRole287E506F"
          },
          {
            "Ref": "datalakepipelinesdlfstagebpostupdatebServiceRoleB7CAF220"
          },
          {
            "Ref": "datalakepipelinesdlfstagebcheckjobbServiceRole83E27FB1"
          },
          {
            "Ref": "datalakepipelinesdlfstagebprocessbServiceRole4152F9A6"
          },
          {
            "Ref": "datalakepipelinesdlfstageberrorbServiceRoleA6C8B8C9"
          },
          {
            "Ref": "datalakepipelinesdlfstagebredrivebServiceRole4211F800"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebPutCloudWatchMetricsPolicy1FA215BEB": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "amcinsights"
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "datalakepipelinesdlfstagebPutCloudWatchMetricsPolicy1FA215BEB",
        "Roles": [
          {
            "Ref": "datalakepipelinesdlfstagebroutingbServiceRole287E506F"
          },
          {
            "Ref": "datalakepipelinesdlfstagebpostupdatebServiceRoleB7CAF220"
          },
          {
            "Ref": "datalakepipelinesdlfstagebcheckjobbServiceRole83E27FB1"
          },
          {
            "Ref": "datalakepipelinesdlfstagebprocessbServiceRole4152F9A6"
          },
          {
            "Ref": "datalakepipelinesdlfstageberrorbServiceRoleA6C8B8C9"
          },
          {
            "Ref": "datalakepipelinesdlfstagebredrivebServiceRole4211F800"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebsdlfheavysmbloggroup16123D18": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/vendedlogs/states/",
              {
                "Ref": "AWS::StackName"
              },
              "-sdlf-heavy-",
              {
                "Fn::Select": [
                  2,
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId"
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "CloudWatchLogs LogGroup should specify a KMS Key Id to encrypt the log data"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebsdlfheavysfnjobrole2259F57A": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "states.",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".amazonaws.com"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebsdlfheavysfnjobpolicyDD126B4B": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:lambda:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":function:",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-adtech-*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "logs:CreateLogDelivery",
                "logs:CreateLogStream",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutLogEvents",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "Roles": [
          {
            "Ref": "datalakepipelinesdlfstagebsdlfheavysfnjobrole2259F57A"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W13",
              "reason": "IAM managed policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebsdlfheavysmb693C8A2C": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{\n    \"Comment\": \"Simple pseudo flow\",\n    \"StartAt\": \"Try\",\n    \"States\": {\n        \"Try\": {\n            \"Type\": \"Parallel\",\n            \"Branches\": [\n                {\n                    \"StartAt\": \"Process Data\",\n                    \"States\": {\n                        \"Process Data\": {\n                            \"Type\": \"Task\",\n                            \"Resource\": \"",
              {
                "Fn::GetAtt": [
                  "datalakepipelinesdlfstagebprocessb1857E732",
                  "Arn"
                ]
              },
              "\",\n                            \"Comment\": \"Process Data\",\n                            \"ResultPath\": \"$.body.job\",\n                            \"Next\": \"Wait\"\n                        },\n                        \"Wait\": {\n                            \"Type\": \"Wait\",\n                            \"Seconds\": 15,\n                            \"Next\": \"Get Job status\"\n                        },\n                        \"Get Job status\": {\n                            \"Type\": \"Task\",\n                            \"Resource\": \"",
              {
                "Fn::GetAtt": [
                  "datalakepipelinesdlfstagebcheckjobbD6F191BF",
                  "Arn"
                ]
              },
              "\",\n                            \"ResultPath\": \"$.body.job\",\n                            \"Next\": \"Did Job finish?\"\n                        },\n                        \"Did Job finish?\": {\n                            \"Type\": \"Choice\",\n                            \"Choices\": [\n                                {\n                                    \"Variable\": \"$.body.job.jobDetails.jobStatus\",\n                                    \"StringEquals\": \"SUCCEEDED\",\n                                    \"Next\": \"Post-update Comprehensive Catalogue\"\n                                },\n                                {\n                                    \"Variable\": \"$.body.job.jobDetails.jobStatus\",\n                                    \"StringEquals\": \"FAILED\",\n                                    \"Next\": \"Job Failed\"\n                                }\n                            ],\n                            \"Default\": \"Wait\"\n                        },\n                        \"Job Failed\": {\n                            \"Type\": \"Fail\",\n                            \"Error\": \"Job Failed\",\n                            \"Cause\": \"Job failed, please check the logs\"\n                        },\n                        \"Post-update Comprehensive Catalogue\": {\n                            \"Type\": \"Task\",\n                            \"Resource\": \"",
              {
                "Fn::GetAtt": [
                  "datalakepipelinesdlfstagebpostupdateb6707B936",
                  "Arn"
                ]
              },
              "\",\n                            \"Comment\": \"Post-update Comprehensive Catalogue\",\n                            \"ResultPath\": \"$.statusCode\",\n                            \"End\": true\n                        }\n                    }\n                }\n            ],\n            \"Catch\": [\n                {\n                    \"ErrorEquals\": [\n                        \"States.ALL\"\n                    ],\n                    \"ResultPath\": null,\n                    \"Next\": \"Error\"\n                }\n            ],\n            \"Next\": \"Done\"\n        },\n        \"Done\": {\n            \"Type\": \"Succeed\"\n        },\n        \"Error\": {\n            \"Type\": \"Task\",\n            \"Resource\": \"",
              {
                "Fn::GetAtt": [
                  "datalakepipelinesdlfstageberrorb751BFF1D",
                  "Arn"
                ]
              },
              "\",\n            \"Comment\": \"Send Original Payload to DLQ\",\n            \"Next\": \"Failed\"\n        },\n        \"Failed\": {\n            \"Type\": \"Fail\"\n        }\n    }\n}"
            ]
          ]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": [
                    "datalakepipelinesdlfstagebsdlfheavysmbloggroup16123D18",
                    "Arn"
                  ]
                }
              }
            }
          ],
          "IncludeExecutionData": false,
          "Level": "ALL"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstagebsdlfheavysfnjobrole2259F57A",
            "Arn"
          ]
        },
        "StateMachineName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-sm-b"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakepipelinesdlfstagebsdlfheavysmbarn47462B5C": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/SM/adtech/insightsStageBSM"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "datalakepipelinesdlfstagebsdlfheavysmb693C8A2C",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcSyncGlueScriptsSDLFHeavyTransformGlueScriptLambdaPolicy30BCAC41": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:List*",
                "s3:Get*",
                "s3:Put*",
                "s3:Delete*"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": [
                    {
                      "Ref": "AWS::AccountId"
                    }
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "bucketsartifactsE01AF792"
                    },
                    "/data_lake/sdlf_heavy_transform/glue/*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "datalakedatasetamcSyncGlueScriptsSDLFHeavyTransformGlueScriptLambdaPolicy30BCAC41",
        "Roles": [
          {
            "Ref": "datalakedatasetamcSyncGlueScriptsCreateSDLFHeavyTransformGlueScriptRoleA63847A9"
          }
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcSyncGlueScriptsCreateSDLFHeavyTransformGlueScriptRoleA63847A9": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcSyncGlueScriptsCreateSDLFHeavyTransformGlueScriptRoleDefaultPolicy884B8719": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "bucketsartifactsbucketkey192CFE4E",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "datalakedatasetamcSyncGlueScriptsCreateSDLFHeavyTransformGlueScriptRoleDefaultPolicy884B8719",
        "Roles": [
          {
            "Ref": "datalakedatasetamcSyncGlueScriptsCreateSDLFHeavyTransformGlueScriptRoleA63847A9"
          }
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcSyncGlueScriptsCreateSDLFHeavyTransformGlueScript71EEC647": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "datalakedatasetamcSyncGlueScriptsCreateSDLFHeavyTransformGlueScript71EEC6478c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Place the glue script of sdlf heavy transform to the S3 artifacts bucket",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1"
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-upload-amc-glue-script"
            ]
          ]
        },
        "Handler": "sync_sdlf_heavy_transform_glue_script.event_handler",
        "Layers": [
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "datalakedatasetamcSyncGlueScriptsCreateSDLFHeavyTransformGlueScriptRoleA63847A9",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 300
      },
      "DependsOn": [
        "datalakedatasetamcSyncGlueScriptsCreateSDLFHeavyTransformGlueScriptRoleDefaultPolicy884B8719",
        "datalakedatasetamcSyncGlueScriptsCreateSDLFHeavyTransformGlueScriptRoleA63847A9"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcSyncGlueScriptssdlfheavytransformgluescriptlambdaalarmsdlfheavytransformgluescriptlambdaalarmthrottlesA80EA888": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakedatasetamcSyncGlueScriptsCreateSDLFHeavyTransformGlueScript71EEC647"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcSyncGlueScriptssdlfheavytransformgluescriptlambdaalarmsdlfheavytransformgluescriptlambdaalarmerrors6443C792": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "datalakedatasetamcSyncGlueScriptsCreateSDLFHeavyTransformGlueScript71EEC647"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcSyncGlueScriptsSDLFHeavyTransformGlueScriptCustomResourceD1D46B07": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "datalakedatasetamcSyncGlueScriptsCreateSDLFHeavyTransformGlueScript71EEC647",
            "Arn"
          ]
        },
        "artifacts_bucket_name": {
          "Ref": "bucketsartifactsE01AF792"
        },
        "artifacts_object_key": "data_lake/sdlf_heavy_transform/glue/adtech/amc/main.py",
        "glue_script_file": "sdlf_heavy_transform/adtech/amc/main.py"
      },
      "DependsOn": [
        "datalakedatasetamcSyncGlueScriptsSDLFHeavyTransformGlueScriptLambdaPolicy30BCAC41"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcsdlfdatasetoctagondatasetregistersdlfdatasetoctagondatasetcustomresource0D148630": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "foundationsRegisterFunction3F085383",
            "Arn"
          ]
        },
        "RegisterProperties": {
          "id": "sdlf-dataset",
          "description": "sdlf dataset",
          "name": "adtech-amc",
          "type": "octagon_dataset",
          "pipeline": "insights",
          "max_items_process": {
            "stage_b": 100,
            "stage_c": 100
          },
          "min_items_process": {
            "stage_b": 1,
            "stage_c": 1
          },
          "version": 1,
          "transforms": {
            "stage_a_transform": "amc_light_transform",
            "stage_b_transform": "amc_heavy_transform"
          }
        }
      },
      "DependsOn": [
        "foundationsRegisterFunction3F085383"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcgluestagebjobrole42FDBFE5": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "glue.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "glue:*Database*",
                    "glue:*Table*",
                    "glue:*Partition*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:glue:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":catalog"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:glue:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":database/",
                          {
                            "Ref": "AWS::StackName"
                          },
                          "_datalake_dev_adtech_amc_db"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:glue:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":table/",
                          {
                            "Ref": "AWS::StackName"
                          },
                          "_datalake_dev_adtech_amc_db/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:glue:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":database/default"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:glue:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":database/global_temp"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Action": "cloudwatch:PutMetricData",
                  "Condition": {
                    "StringEquals": {
                      "cloudwatch:namespace": "amcinsights"
                    }
                  },
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws-glue/*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "GlueRolePolicy"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "IAM role should not allow * resource on its permissions policy"
            }
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcgluejobpolicyA444C294": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:GenerateDataKeyPair",
                "kms:GenerateDataKeyPairWithoutPlaintext",
                "kms:GenerateDataKeyWithoutPlaintext",
                "kms:ReEncryptTo",
                "kms:ReEncryptFrom"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "bucketsartifactsbucketkey192CFE4E",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "foundationsrawbucketkey4CF96398",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "foundationsstagebucketkey2FA5FAF2",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:ListBucket"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": [
                    {
                      "Ref": "AWS::AccountId"
                    }
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "bucketsartifactsE01AF792",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "bucketsartifactsE01AF792",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "foundationsrawbucket6964B12D",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "foundationsrawbucket6964B12D",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "foundationsstagebucket7D53680B",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "foundationsstagebucket7D53680B",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "Roles": [
          {
            "Ref": "datalakedatasetamcgluestagebjobrole42FDBFE5"
          }
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcsdlfheavytransformgluejob5B847F51": {
      "Type": "AWS::Glue::Job",
      "Properties": {
        "AllocatedCapacity": 2,
        "Command": {
          "Name": "glueetl",
          "ScriptLocation": {
            "Fn::Join": [
              "",
              [
                "s3://",
                {
                  "Ref": "bucketsartifactsE01AF792"
                },
                "/data_lake/sdlf_heavy_transform/glue/adtech/amc/main.py"
              ]
            ]
          }
        },
        "DefaultArguments": {
          "--job-bookmark-option": "job-bookmark-enable",
          "--enable-metrics": "",
          "--additional-python-modules": "awswrangler==2.4.0,aws-lambda-powertools==2.15.0",
          "--enable-job-insights": "true",
          "--SOLUTION_ID": "SO0193",
          "--SOLUTION_VERSION": "v2.0.1",
          "--METRICS_NAMESPACE": "amcinsights",
          "--RESOURCE_PREFIX": {
            "Ref": "AWS::StackName"
          }
        },
        "ExecutionProperty": {
          "MaxConcurrentRuns": 4
        },
        "GlueVersion": "2.0",
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-amc-glue-job"
            ]
          ]
        },
        "Role": {
          "Fn::GetAtt": [
            "datalakedatasetamcgluestagebjobrole42FDBFE5",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcamcheavytransformadtechamcjobname9A270343": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/Glue/adtech/amc/SDLFHeavyTransformJobName"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-amc-glue-job"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcSDLFDatasetDataLakeSettingsF3137538": {
      "Type": "AWS::LakeFormation::DataLakeSettings",
      "Properties": {
        "Admins": [
          {
            "DataLakePrincipalIdentifier": {
              "Fn::GetAtt": [
                "datalakedatasetamcgluestagebjobrole42FDBFE5",
                "Arn"
              ]
            }
          }
        ]
      },
      "DependsOn": [
        "datalakedatasetamcgluestagebjobrole42FDBFE5"
      ],
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcdatabase20328437": {
      "Type": "AWS::Glue::Database",
      "Properties": {
        "CatalogId": {
          "Ref": "AWS::AccountId"
        },
        "DatabaseInput": {
          "Name": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AWS::StackName"
                },
                "_datalake_dev_adtech_amc_db"
              ]
            ]
          }
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcgluejobdatabaselakeformationpermissions1343AEBF": {
      "Type": "AWS::LakeFormation::Permissions",
      "Properties": {
        "DataLakePrincipal": {
          "DataLakePrincipalIdentifier": {
            "Fn::GetAtt": [
              "datalakedatasetamcgluestagebjobrole42FDBFE5",
              "Arn"
            ]
          }
        },
        "Permissions": [
          "CREATE_TABLE",
          "ALTER",
          "DROP"
        ],
        "Resource": {
          "DatabaseResource": {
            "Name": {
              "Ref": "datalakedatasetamcdatabase20328437"
            }
          }
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcamcadtechamcstagecatalog9483AD73": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/Glue/adtech/amc/StageDataCatalog"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "_datalake_dev_adtech_amc_db"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcsqskeyb6E445B5F": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "SQS Key Stage B",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PendingWindowInDays": 30
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcsqskeybAliasB88643A0": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "",
            [
              "alias/",
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-amc-sqs-stage-b-key"
            ]
          ]
        },
        "TargetKeyId": {
          "Fn::GetAtt": [
            "datalakedatasetamcsqskeyb6E445B5F",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcamcdlqb5B1B089C": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "FifoQueue": true,
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "datalakedatasetamcsqskeyb6E445B5F",
            "Arn"
          ]
        },
        "QueueName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-amc-dlq-b.fifo"
            ]
          ]
        },
        "VisibilityTimeout": 60
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcalarmdlqb71ACF1AF": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "CloudWatch Alarm for Routing DLQ B",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "QueueName",
            "Value": {
              "Fn::GetAtt": [
                "datalakedatasetamcamcdlqb5B1B089C",
                "QueueName"
              ]
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "ApproximateNumberOfMessagesVisible",
        "Namespace": "AWS/SQS",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcamcdlqbfifossm31D21DC7": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/SQS/adtech/amcStageBDLQ"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-amc-dlq-b.fifo"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcamcqueueb49EC685A": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "FifoQueue": true,
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "datalakedatasetamcsqskeyb6E445B5F",
            "Arn"
          ]
        },
        "QueueName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-amc-queue-b.fifo"
            ]
          ]
        },
        "RedrivePolicy": {
          "deadLetterTargetArn": {
            "Fn::GetAtt": [
              "datalakedatasetamcamcdlqb5B1B089C",
              "Arn"
            ]
          },
          "maxReceiveCount": 1
        },
        "VisibilityTimeout": 60
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcamcqueuebfifossm904144AD": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/SQS/adtech/amcStageBQueue"
            ]
          ]
        },
        "Type": "String",
        "Value": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-amc-queue-b.fifo"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcruleb18DDA57D": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-amc-rule-b"
            ]
          ]
        },
        "ScheduleExpression": "cron(*/5 * * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:lambda:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":function:",
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-adtech-insights-routing-b"
                ]
              ]
            },
            "Id": "target-rule-b",
            "Input": "{\n    \"team\": \"adtech\",\n    \"pipeline\": \"insights\",\n    \"pipeline_stage\": \"StageB\",\n    \"dataset\": \"amc\",\n    \"env\": \"dev\"\n}"
          }
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "datalakedatasetamcsdlfdatasetroutingb1771A87A": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-adtech-insights-routing-b"
            ]
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "datalakedatasetamcruleb18DDA57D",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "wfmwfmmasterkey6D11631E": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "WFM Service Master Key",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*"
            },
            {
              "Action": [
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:GenerateDataKeyPair",
                "kms:GenerateDataKeyPairWithoutPlaintext",
                "kms:GenerateDataKeyWithoutPlaintext",
                "kms:ReEncryptTo",
                "kms:ReEncryptFrom",
                "kms:ListAliases",
                "kms:ListGrants",
                "kms:ListKeys",
                "kms:ListKeyPolicies"
              ],
              "Condition": {
                "StringLike": {
                  "kms:EncryptionContext:aws:sns:arn": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:sns:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":",
                          {
                            "Ref": "AWS::StackName"
                          },
                          "-wfm-SNSTopic"
                        ]
                      ]
                    }
                  ]
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "sns.amazonaws.com"
              },
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PendingWindowInDays": 30
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmmasterkeyAliasA64FC132": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "",
            [
              "alias/",
              {
                "Ref": "AWS::StackName"
              },
              "-wfm-adtech-master-key"
            ]
          ]
        },
        "TargetKeyId": {
          "Fn::GetAtt": [
            "wfmwfmmasterkey6D11631E",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmSNSTopicC0158A89": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "wfmwfmmasterkey6D11631E",
            "Arn"
          ]
        },
        "TopicName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-wfm-SNSTopic"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmSNSTopicTokenSubscription1490F6673": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Endpoint": {
          "Ref": "NotificationEmail"
        },
        "Protocol": "email",
        "TopicArn": {
          "Ref": "wfmwfmSNSTopicC0158A89"
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmCustomerConfig2F0732CB": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "customerId",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "customerId",
            "KeyType": "HASH"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "wfmwfmmasterkey6D11631E",
              "Arn"
            ]
          },
          "SSEEnabled": true,
          "SSEType": "KMS"
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmWorkflows325855B5": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "customerId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "workflowId",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "customerId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "workflowId",
            "KeyType": "RANGE"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "wfmwfmmasterkey6D11631E",
              "Arn"
            ]
          },
          "SSEEnabled": true,
          "SSEType": "KMS"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmWorkflowExecutions11C6BC9C": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "customerId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "workflowExecutionId",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "customerId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "workflowExecutionId",
            "KeyType": "RANGE"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "wfmwfmmasterkey6D11631E",
              "Arn"
            ]
          },
          "SSEEnabled": true,
          "SSEType": "KMS"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmlayerC95829F8": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [
          "python3.9"
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "wfmwfmlayerC95829F88c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "LayerName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-wfm-layer"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmmetricslayer06E060B6": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [
          "python3.9"
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "wfmmetricslayer06E060B68c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "LayerName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-metrics-layer"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmInvokeWorkflowSMServiceRoleB4185736": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmInvokeWorkflowSMServiceRoleDefaultPolicy55A08134": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "wfmWFMWorkflowsSM4F2EDA69"
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "wfmwfmSNSTopicC0158A89"
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackId"
                    },
                    "-wfm-SNSTopic-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "wfmwfmInvokeWorkflowSMServiceRoleDefaultPolicy55A08134",
        "Roles": [
          {
            "Ref": "wfmwfmInvokeWorkflowSMServiceRoleB4185736"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmInvokeWorkflowSMA913F662": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "wfmwfmInvokeWorkflowSMA913F6628c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Invokes the Workflow state machine",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "STACK_NAME": {
              "Ref": "AWS::StackName"
            },
            "STEP_FUNCTION_STATE_MACHINE_ARN": {
              "Ref": "wfmWFMWorkflowsSM4F2EDA69"
            }
          }
        },
        "Handler": "handler.handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "wfmwfmlayerC95829F8"
          },
          {
            "Ref": "wfmmetricslayer06E060B6"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "wfmwfmInvokeWorkflowSMServiceRoleB4185736",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "wfmwfmInvokeWorkflowSMServiceRoleDefaultPolicy55A08134",
        "wfmwfmInvokeWorkflowSMServiceRoleB4185736"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmInvokeWorkflowExecutionSMServiceRole9843DEC5": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmInvokeWorkflowExecutionSMServiceRoleDefaultPolicyE35E0F94": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmWorkflows325855B5",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": "dynamodb:DescribeTable",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmWorkflows325855B5",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "wfmWFMExecutionsSM5256870E"
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "wfmwfmSNSTopicC0158A89"
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackId"
                    },
                    "-wfm-SNSTopic-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "wfmwfmInvokeWorkflowExecutionSMServiceRoleDefaultPolicyE35E0F94",
        "Roles": [
          {
            "Ref": "wfmwfmInvokeWorkflowExecutionSMServiceRole9843DEC5"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmInvokeWorkflowExecutionSMA305784A": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "wfmwfmInvokeWorkflowExecutionSMA305784A8c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Invokes the Workflow Executions state machine",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "DATASET_WORKFLOW_TABLE": {
              "Ref": "wfmwfmWorkflows325855B5"
            },
            "METRICS_NAMESPACE": "amcinsights",
            "STACK_NAME": {
              "Ref": "AWS::StackName"
            },
            "STEP_FUNCTION_STATE_MACHINE_ARN": {
              "Ref": "wfmWFMExecutionsSM5256870E"
            }
          }
        },
        "Handler": "handler.handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "wfmwfmlayerC95829F8"
          },
          {
            "Ref": "wfmmetricslayer06E060B6"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "wfmwfmInvokeWorkflowExecutionSMServiceRole9843DEC5",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "wfmwfmInvokeWorkflowExecutionSMServiceRoleDefaultPolicyE35E0F94",
        "wfmwfmInvokeWorkflowExecutionSMServiceRole9843DEC5"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmInvokeWorkflowExecutionSMwfmalloweventbridgeinvokeBFA54E55": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "wfmwfmInvokeWorkflowExecutionSMA305784A",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:events:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":rule/*"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmCheckWorkflowExeuctionStatusServiceRole41FB9F9D": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmCheckWorkflowExeuctionStatusServiceRoleDefaultPolicy4375DB3A": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmWorkflowExecutions11C6BC9C",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": "dynamodb:DescribeTable",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmWorkflowExecutions11C6BC9C",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "wfmwfmSNSTopicC0158A89"
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackId"
                    },
                    "-wfm-SNSTopic-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "wfmwfmCheckWorkflowExeuctionStatusServiceRoleDefaultPolicy4375DB3A",
        "Roles": [
          {
            "Ref": "wfmwfmCheckWorkflowExeuctionStatusServiceRole41FB9F9D"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmCheckWorkflowExeuctionStatus6C020B47": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "wfmwfmCheckWorkflowExeuctionStatus6C020B478c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Checks the status of workflow executions",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "EXECUTION_STATUS_TABLE": {
              "Ref": "wfmwfmWorkflowExecutions11C6BC9C"
            },
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Handler": "handler.handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "wfmwfmlayerC95829F8"
          },
          {
            "Ref": "wfmmetricslayer06E060B6"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "wfmwfmCheckWorkflowExeuctionStatusServiceRole41FB9F9D",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "wfmwfmCheckWorkflowExeuctionStatusServiceRoleDefaultPolicy4375DB3A",
        "wfmwfmCheckWorkflowExeuctionStatusServiceRole41FB9F9D"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmGetWorkflowExecutionSummaryServiceRole13A909F0": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmGetWorkflowExecutionSummaryServiceRoleDefaultPolicyEDA1D41C": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "wfmwfmSNSTopicC0158A89"
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackId"
                    },
                    "-wfm-SNSTopic-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "wfmwfmGetWorkflowExecutionSummaryServiceRoleDefaultPolicyEDA1D41C",
        "Roles": [
          {
            "Ref": "wfmwfmGetWorkflowExecutionSummaryServiceRole13A909F0"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmGetWorkflowExecutionSummary50456DD7": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "wfmwfmGetWorkflowExecutionSummary50456DD78c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Gets a summary of workflow executions",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Handler": "handler.handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "wfmwfmlayerC95829F8"
          },
          {
            "Ref": "wfmmetricslayer06E060B6"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "wfmwfmGetWorkflowExecutionSummaryServiceRole13A909F0",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "wfmwfmGetWorkflowExecutionSummaryServiceRoleDefaultPolicyEDA1D41C",
        "wfmwfmGetWorkflowExecutionSummaryServiceRole13A909F0"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmCreateWorkflowExecutionServiceRole1B42212B": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmCreateWorkflowExecutionServiceRoleDefaultPolicy31268494": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmWorkflowExecutions11C6BC9C",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": "dynamodb:DescribeTable",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmWorkflowExecutions11C6BC9C",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "wfmwfmSNSTopicC0158A89"
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackId"
                    },
                    "-wfm-SNSTopic-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "wfmwfmCreateWorkflowExecutionServiceRoleDefaultPolicy31268494",
        "Roles": [
          {
            "Ref": "wfmwfmCreateWorkflowExecutionServiceRole1B42212B"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmCreateWorkflowExecution3EE0EE34": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "wfmwfmCreateWorkflowExecution3EE0EE348c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Creates a new workflow execution",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "EXECUTION_STATUS_TABLE": {
              "Ref": "wfmwfmWorkflowExecutions11C6BC9C"
            },
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Handler": "handler.handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "wfmwfmlayerC95829F8"
          },
          {
            "Ref": "wfmmetricslayer06E060B6"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "wfmwfmCreateWorkflowExecutionServiceRole1B42212B",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 600
      },
      "DependsOn": [
        "wfmwfmCreateWorkflowExecutionServiceRoleDefaultPolicy31268494",
        "wfmwfmCreateWorkflowExecutionServiceRole1B42212B"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmCancelWorkflowExecutionLambdaServiceRoleC4A54E9D": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmCancelWorkflowExecutionLambdaServiceRoleDefaultPolicyE0A2F306": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmWorkflowExecutions11C6BC9C",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": "dynamodb:DescribeTable",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmWorkflowExecutions11C6BC9C",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "wfmwfmSNSTopicC0158A89"
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackId"
                    },
                    "-wfm-SNSTopic-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "wfmwfmCancelWorkflowExecutionLambdaServiceRoleDefaultPolicyE0A2F306",
        "Roles": [
          {
            "Ref": "wfmwfmCancelWorkflowExecutionLambdaServiceRoleC4A54E9D"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmCancelWorkflowExecutionLambda7685CB21": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "wfmwfmCancelWorkflowExecutionLambda7685CB218c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Cancels a running workflow execution",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "EXECUTION_STATUS_TABLE": {
              "Ref": "wfmwfmWorkflowExecutions11C6BC9C"
            },
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Handler": "handler.handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "wfmwfmlayerC95829F8"
          },
          {
            "Ref": "wfmmetricslayer06E060B6"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "wfmwfmCancelWorkflowExecutionLambdaServiceRoleC4A54E9D",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "wfmwfmCancelWorkflowExecutionLambdaServiceRoleDefaultPolicyE0A2F306",
        "wfmwfmCancelWorkflowExecutionLambdaServiceRoleC4A54E9D"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmCreateWorkflowServiceRole3D5505DA": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmCreateWorkflowServiceRoleDefaultPolicy33F11DC9": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmWorkflows325855B5",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": "dynamodb:DescribeTable",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmWorkflows325855B5",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "wfmwfmSNSTopicC0158A89"
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackId"
                    },
                    "-wfm-SNSTopic-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "wfmwfmCreateWorkflowServiceRoleDefaultPolicy33F11DC9",
        "Roles": [
          {
            "Ref": "wfmwfmCreateWorkflowServiceRole3D5505DA"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmCreateWorkflowFB320128": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "wfmwfmCreateWorkflowFB3201288c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Creates a new workflow",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "WORKFLOWS_TABLE_NAME": {
              "Ref": "wfmwfmWorkflows325855B5"
            },
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Handler": "handler.handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "wfmwfmlayerC95829F8"
          },
          {
            "Ref": "wfmmetricslayer06E060B6"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "wfmwfmCreateWorkflowServiceRole3D5505DA",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "wfmwfmCreateWorkflowServiceRoleDefaultPolicy33F11DC9",
        "wfmwfmCreateWorkflowServiceRole3D5505DA"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmUpdateWorkflowServiceRole5ADF273D": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmUpdateWorkflowServiceRoleDefaultPolicy4CF661C5": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmWorkflows325855B5",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": "dynamodb:DescribeTable",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmWorkflows325855B5",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "wfmwfmSNSTopicC0158A89"
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackId"
                    },
                    "-wfm-SNSTopic-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "wfmwfmUpdateWorkflowServiceRoleDefaultPolicy4CF661C5",
        "Roles": [
          {
            "Ref": "wfmwfmUpdateWorkflowServiceRole5ADF273D"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmUpdateWorkflowD0F5251A": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "wfmwfmUpdateWorkflowD0F5251A8c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Updates an existing workflow",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "WORKFLOWS_TABLE_NAME": {
              "Ref": "wfmwfmWorkflows325855B5"
            }
          }
        },
        "Handler": "handler.handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "wfmwfmlayerC95829F8"
          },
          {
            "Ref": "wfmmetricslayer06E060B6"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "wfmwfmUpdateWorkflowServiceRole5ADF273D",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "wfmwfmUpdateWorkflowServiceRoleDefaultPolicy4CF661C5",
        "wfmwfmUpdateWorkflowServiceRole5ADF273D"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmGetWorkflowServiceRole74A84048": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmGetWorkflowServiceRoleDefaultPolicy5212EBE9": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmWorkflows325855B5",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": "dynamodb:DescribeTable",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmWorkflows325855B5",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "wfmwfmSNSTopicC0158A89"
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackId"
                    },
                    "-wfm-SNSTopic-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "wfmwfmGetWorkflowServiceRoleDefaultPolicy5212EBE9",
        "Roles": [
          {
            "Ref": "wfmwfmGetWorkflowServiceRole74A84048"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmGetWorkflowA5699550": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "wfmwfmGetWorkflowA56995508c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Gets a workflow definition",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "WORKFLOWS_TABLE_NAME": {
              "Ref": "wfmwfmWorkflows325855B5"
            }
          }
        },
        "Handler": "handler.handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "wfmwfmlayerC95829F8"
          },
          {
            "Ref": "wfmmetricslayer06E060B6"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "wfmwfmGetWorkflowServiceRole74A84048",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "wfmwfmGetWorkflowServiceRoleDefaultPolicy5212EBE9",
        "wfmwfmGetWorkflowServiceRole74A84048"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmDeleteWorkflowServiceRoleCD0ADAB9": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmDeleteWorkflowServiceRoleDefaultPolicy4C1D7D1A": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmWorkflows325855B5",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": "dynamodb:DescribeTable",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmWorkflows325855B5",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "wfmwfmSNSTopicC0158A89"
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackId"
                    },
                    "-wfm-SNSTopic-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "wfmwfmDeleteWorkflowServiceRoleDefaultPolicy4C1D7D1A",
        "Roles": [
          {
            "Ref": "wfmwfmDeleteWorkflowServiceRoleCD0ADAB9"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmDeleteWorkflow4BF3C63D": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "wfmwfmDeleteWorkflow4BF3C63D8c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Deletes a workflow",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "WORKFLOWS_TABLE_NAME": {
              "Ref": "wfmwfmWorkflows325855B5"
            },
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Handler": "handler.handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "wfmwfmlayerC95829F8"
          },
          {
            "Ref": "wfmmetricslayer06E060B6"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "wfmwfmDeleteWorkflowServiceRoleCD0ADAB9",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "wfmwfmDeleteWorkflowServiceRoleDefaultPolicy4C1D7D1A",
        "wfmwfmDeleteWorkflowServiceRoleCD0ADAB9"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmCreateWorkflowScheduleServiceRole895EE367": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmCreateWorkflowScheduleServiceRoleDefaultPolicy9B5E4502": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "wfmwfmSNSTopicC0158A89"
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackId"
                    },
                    "-wfm-SNSTopic-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "wfmwfmCreateWorkflowScheduleServiceRoleDefaultPolicy9B5E4502",
        "Roles": [
          {
            "Ref": "wfmwfmCreateWorkflowScheduleServiceRole895EE367"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmCreateWorkflowSchedule332BD3C0": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "wfmwfmCreateWorkflowSchedule332BD3C08c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Creates a workflow schedule",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "INVOKE_WORKFLOW_EXECUTION_SM_LAMBDA_ARN": {
              "Fn::GetAtt": [
                "wfmwfmInvokeWorkflowExecutionSMA305784A",
                "Arn"
              ]
            },
            "RULE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Handler": "handler.handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "wfmwfmlayerC95829F8"
          },
          {
            "Ref": "wfmmetricslayer06E060B6"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "wfmwfmCreateWorkflowScheduleServiceRole895EE367",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "wfmwfmCreateWorkflowScheduleServiceRoleDefaultPolicy9B5E4502",
        "wfmwfmCreateWorkflowScheduleServiceRole895EE367"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmDeleteWorkflowScheduleServiceRoleB8BF74CE": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmDeleteWorkflowScheduleServiceRoleDefaultPolicy6BD6594D": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "wfmwfmSNSTopicC0158A89"
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackId"
                    },
                    "-wfm-SNSTopic-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "wfmwfmDeleteWorkflowScheduleServiceRoleDefaultPolicy6BD6594D",
        "Roles": [
          {
            "Ref": "wfmwfmDeleteWorkflowScheduleServiceRoleB8BF74CE"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmwfmDeleteWorkflowSchedule7328E733": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "wfmwfmDeleteWorkflowSchedule7328E7338c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Deletes a workflow schedule",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "RULE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Handler": "handler.handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "wfmwfmlayerC95829F8"
          },
          {
            "Ref": "wfmmetricslayer06E060B6"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "wfmwfmDeleteWorkflowScheduleServiceRoleB8BF74CE",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 60
      },
      "DependsOn": [
        "wfmwfmDeleteWorkflowScheduleServiceRoleDefaultPolicy6BD6594D",
        "wfmwfmDeleteWorkflowScheduleServiceRoleB8BF74CE"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmcloudwatchEventsInlinePolicyB8BBBC27": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "events:PutRule",
                "events:PutTargets",
                "events:RemoveTargets",
                "events:DeleteRule",
                "events:TagResource"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:events:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":rule/",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "wfmcloudwatchEventsInlinePolicyB8BBBC27",
        "Roles": [
          {
            "Ref": "wfmwfmDeleteWorkflowScheduleServiceRoleB8BF74CE"
          },
          {
            "Ref": "wfmwfmCreateWorkflowScheduleServiceRole895EE367"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmPutCloudWatchMetricsPolicy5D03CC40": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "amcinsights"
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "wfmPutCloudWatchMetricsPolicy5D03CC40",
        "Roles": [
          {
            "Ref": "wfmwfmCancelWorkflowExecutionLambdaServiceRoleC4A54E9D"
          },
          {
            "Ref": "wfmwfmCheckWorkflowExeuctionStatusServiceRole41FB9F9D"
          },
          {
            "Ref": "wfmwfmCreateWorkflowServiceRole3D5505DA"
          },
          {
            "Ref": "wfmwfmCreateWorkflowExecutionServiceRole1B42212B"
          },
          {
            "Ref": "wfmwfmCreateWorkflowScheduleServiceRole895EE367"
          },
          {
            "Ref": "wfmwfmDeleteWorkflowServiceRoleCD0ADAB9"
          },
          {
            "Ref": "wfmwfmDeleteWorkflowScheduleServiceRoleB8BF74CE"
          },
          {
            "Ref": "wfmwfmGetWorkflowExecutionSummaryServiceRole13A909F0"
          },
          {
            "Ref": "wfmwfmGetWorkflowServiceRole74A84048"
          },
          {
            "Ref": "wfmwfmInvokeWorkflowExecutionSMServiceRole9843DEC5"
          },
          {
            "Ref": "wfmwfmInvokeWorkflowSMServiceRoleB4185736"
          },
          {
            "Ref": "wfmwfmUpdateWorkflowServiceRole5ADF273D"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmApiInvokeRoleStandardFA4D634A": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "wfmwfmCancelWorkflowExecutionLambdaServiceRoleC4A54E9D",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "wfmwfmCheckWorkflowExeuctionStatusServiceRole41FB9F9D",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "wfmwfmCreateWorkflowServiceRole3D5505DA",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "wfmwfmCreateWorkflowExecutionServiceRole1B42212B",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "wfmwfmDeleteWorkflowServiceRoleCD0ADAB9",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "wfmwfmGetWorkflowServiceRole74A84048",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "wfmwfmGetWorkflowExecutionSummaryServiceRole13A909F0",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "wfmwfmUpdateWorkflowServiceRole5ADF273D",
                      "Arn"
                    ]
                  }
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Description": "Standard API role for WFM service when a customer is onboarded in the Connected AWS Account"
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmWFMExecutionsSMLogGroupBA579960": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/vendedlogs/states/",
              {
                "Ref": "AWS::StackName"
              },
              "-wfm-executions-",
              {
                "Fn::Select": [
                  2,
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId"
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "CloudWatchLogs LogGroup should specify a KMS Key Id to encrypt the log data"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmWFMExecutionsSMRole02177937": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "states.",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".amazonaws.com"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmWFMExecutionsSMRoleDefaultPolicy660AACEF": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "dynamodb:GetItem",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":dynamodb:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":table/",
                    {
                      "Ref": "wfmwfmCustomerConfig2F0732CB"
                    }
                  ]
                ]
              }
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmCreateWorkflowExecution3EE0EE34",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "wfmwfmCreateWorkflowExecution3EE0EE34",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmCancelWorkflowExecutionLambda7685CB21",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "wfmwfmCancelWorkflowExecutionLambda7685CB21",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmCheckWorkflowExeuctionStatus6C020B47",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "wfmwfmCheckWorkflowExeuctionStatus6C020B47",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Eval078d40d3fb4e4d5394a79c46fc11fe029D0ED2B4",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Eval078d40d3fb4e4d5394a79c46fc11fe029D0ED2B4",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "wfmwfmSNSTopicC0158A89"
              }
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmGetWorkflowExecutionSummary50456DD7",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "wfmwfmGetWorkflowExecutionSummary50456DD7",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackId"
                    },
                    "-wfm-SNSTopic-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "wfmWFMExecutionsSMRoleDefaultPolicy660AACEF",
        "Roles": [
          {
            "Ref": "wfmWFMExecutionsSMRole02177937"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmWFMExecutionsSM5256870E": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{\"StartAt\":\"Wait 5 seconds before starting\",\"States\":{\"Wait 5 seconds before starting\":{\"Type\":\"Wait\",\"SecondsPath\":\"$.initialWait\",\"Next\":\"GetCustomerConfigRecord\"},\"GetCustomerConfigRecord\":{\"Next\":\"Determine Execution Request Type\",\"Type\":\"Task\",\"ResultPath\":\"$.customerConfig\",\"ResultSelector\":{\"customerId.$\":\"$.Item.customerId.S\",\"amcApiEndpoint.$\":\"$.Item.amcApiEndpoint.S\",\"invokeAmcApiRoleArn.$\":\"$.Item.invokeAmcApiRoleArn.S\",\"outputSNSTopicArn.$\":\"$.Item.outputSNSTopicArn.S\",\"amcRegion.$\":\"$.Item.amcRegion.S\"},\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::dynamodb:getItem\",\"Parameters\":{\"Key\":{\"customerId\":{\"S.$\":\"$.customerId\"}},\"TableName\":\"",
              {
                "Ref": "wfmwfmCustomerConfig2F0732CB"
              },
              "\",\"ConsistentRead\":false}},\"Determine Execution Request Type\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.executionRequest.requestType\",\"StringEquals\":\"getExecutionStatus\",\"Next\":\"Get Execution Status\"},{\"Variable\":\"$.executionRequest.requestType\",\"StringEquals\":\"createExecution\",\"Next\":\"Get Workflow Execution Summary\"},{\"Variable\":\"$.executionRequest.requestType\",\"StringEquals\":\"cancelExecution\",\"Next\":\"Cancel Workflow Execution\"}],\"Default\":\"Failed to process Execution request\"},\"Wait 10 Minutes to retry api call\":{\"Type\":\"Wait\",\"Seconds\":600,\"Next\":\"Determine Execution Request Type\"},\"Execution Status Response\":{\"Type\":\"Choice\",\"Choices\":[{\"Or\":[{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"PENDING\"},{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"RUNNING\"},{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"PUBLISHING\"}],\"Next\":\"Wait 5 minutes before re checking execution status\"},{\"Or\":[{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"SUCCEEDED\"},{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"CANCELLED\"},{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"FAILED\"},{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"REJECTED\"}],\"Next\":\"Set Execution Notification Subject\"},{\"Variable\":\"$.message\",\"StringEquals\":\"Endpoint request timed out\",\"Next\":\"Wait 10 Minutes to retry api call\"}],\"Default\":\"Failed to process Execution request\"},\"Create Workflow Execution\":{\"Next\":\"Execution Status Response\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
              {
                "Fn::GetAtt": [
                  "wfmwfmCreateWorkflowExecution3EE0EE34",
                  "Arn"
                ]
              },
              "\",\"Payload.$\":\"$\"}},\"Cancel Workflow Execution\":{\"Next\":\"Execution Status Response\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
              {
                "Fn::GetAtt": [
                  "wfmwfmCancelWorkflowExecutionLambda7685CB21",
                  "Arn"
                ]
              },
              "\",\"Payload.$\":\"$\"}},\"Get Execution Status\":{\"Next\":\"Execution Status Response\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
              {
                "Fn::GetAtt": [
                  "wfmwfmCheckWorkflowExeuctionStatus6C020B47",
                  "Arn"
                ]
              },
              "\",\"Payload.$\":\"$\"}},\"Wait 5 minutes before re checking execution status\":{\"Type\":\"Wait\",\"Seconds\":300,\"Next\":\"Get Execution Status\"},\"Failed to process Execution request\":{\"Type\":\"Fail\"},\"Set Execution Notification Subject\":{\"Next\":\"Copy Execution to SNS message content\",\"Type\":\"Task\",\"ResultPath\":\"$.messageSubject\",\"Resource\":\"",
              {
                "Fn::GetAtt": [
                  "Eval078d40d3fb4e4d5394a79c46fc11fe029D0ED2B4",
                  "Arn"
                ]
              },
              "\",\"Parameters\":{\"expression\":\"`${$.customerId} ${$.executionRequest.requestType} for ${$.workflowExecutionName} ${$.responseStatus}`.slice(0,100)\",\"expressionAttributeValues\":{\"$.customerId.$\":\"$.customerId\",\"$.executionRequest.requestType.$\":\"$.executionRequest.requestType\",\"$.workflowExecutionName.$\":\"$.workflowExecutionName\",\"$.responseStatus.$\":\"$.responseStatus\"}}},\"Copy Execution to SNS message content\":{\"Type\":\"Pass\",\"ResultPath\":\"$.snsMessage\",\"Parameters\":{\"default.$\":\"States.JsonToString($)\"},\"Next\":\"Set Execution Notification Body\"},\"Set Execution Notification Body\":{\"Next\":\"Publish Execution To SNS\",\"Type\":\"Task\",\"ResultPath\":\"$.snsMessage.email\",\"Resource\":\"",
              {
                "Fn::GetAtt": [
                  "Eval078d40d3fb4e4d5394a79c46fc11fe029D0ED2B4",
                  "Arn"
                ]
              },
              "\",\"Parameters\":{\"expression\":\"`${$.messageSubject}\\n\\nCustomer ID: ${$.customerId}\\nRequest Type: ${$.executionRequest.requestType}\\nWorkflow Execution Name: ${$.workflowExecutionName}\\nResponse Status: ${$.responseStatus}\\nResponse Message: ${$.responseMessage}\\n\\n\\nWorkflow Execution Request:\\n${$.snsMessage.default}`\",\"expressionAttributeValues\":{\"$.messageSubject.$\":\"$.messageSubject\",\"$.customerId.$\":\"$.customerId\",\"$.executionRequest.requestType.$\":\"$.executionRequest.requestType\",\"$.workflowExecutionName.$\":\"$.workflowExecutionName\",\"$.responseStatus.$\":\"$.responseStatus\",\"$.responseMessage.$\":\"$.responseMessage\",\"$.snsMessage.default.$\":\"$.snsMessage.default\"}}},\"Publish Execution To SNS\":{\"Next\":\"Final Execution Evaluation\",\"Type\":\"Task\",\"ResultPath\":\"$.SNSResponse\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::sns:publish\",\"Parameters\":{\"TopicArn\":\"",
              {
                "Ref": "wfmwfmSNSTopicC0158A89"
              },
              "\",\"Message.$\":\"States.JsonToString($.snsMessage)\",\"MessageStructure\":\"json\",\"MessageAttributes\":{\"customerId\":{\"DataType\":\"String\",\"StringValue.$\":\"$.customerId\"},\"requestType\":{\"DataType\":\"String\",\"StringValue.$\":\"$.executionRequest.requestType\"},\"responseStatus\":{\"DataType\":\"String\",\"StringValue.$\":\"$.responseStatus\"}},\"Subject.$\":\"$.messageSubject\"}},\"Final Execution Evaluation\":{\"Type\":\"Choice\",\"Choices\":[{\"Or\":[{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"SUCCEEDED\"},{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"CANCELLED\"}],\"Next\":\"Execution Request Successfully Completed\"},{\"Or\":[{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"FAILED\"},{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"REJECTED\"}],\"Next\":\"Execution Request did not Complete\"}],\"Default\":\"Failed to process Execution request\"},\"Execution Request Successfully Completed\":{\"Type\":\"Succeed\"},\"Execution Request did not Complete\":{\"Type\":\"Fail\"},\"Get Workflow Execution Summary\":{\"Next\":\"Evaluate Execution Summary\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
              {
                "Fn::GetAtt": [
                  "wfmwfmGetWorkflowExecutionSummary50456DD7",
                  "Arn"
                ]
              },
              "\",\"Payload.$\":\"$\"}},\"Wait 10 Minutes for Other Executions to Finish\":{\"Type\":\"Wait\",\"Seconds\":600,\"Next\":\"Get Workflow Execution Summary\"},\"Evaluate Execution Summary\":{\"Type\":\"Choice\",\"Comment\":\"check to see if there are less that 10 running and pending executions before creating a new execution\",\"Choices\":[{\"Variable\":\"$.executionsSummary.totalRunningorPending\",\"NumericGreaterThanEquals\":10,\"Next\":\"Wait 10 Minutes for Other Executions to Finish\"}],\"Default\":\"Create Workflow Execution\"}}}"
            ]
          ]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": [
                    "wfmWFMExecutionsSMLogGroupBA579960",
                    "Arn"
                  ]
                }
              }
            }
          ],
          "Level": "ALL"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "wfmWFMExecutionsSMRole02177937",
            "Arn"
          ]
        },
        "StateMachineName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-wfm-executions"
            ]
          ]
        }
      },
      "DependsOn": [
        "wfmWFMExecutionsSMRoleDefaultPolicy660AACEF",
        "wfmWFMExecutionsSMRole02177937"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmWFMWorkflowsSMLogGroupA1637951": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/vendedlogs/states/",
              {
                "Ref": "AWS::StackName"
              },
              "-wfm-workflows-",
              {
                "Fn::Select": [
                  2,
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId"
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "CloudWatchLogs LogGroup should specify a KMS Key Id to encrypt the log data"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmWFMWorkflowsSMRole9AC556AD": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "states.",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".amazonaws.com"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmWFMWorkflowsSMRoleDefaultPolicyFA2D5633": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "dynamodb:GetItem",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":dynamodb:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":table/",
                    {
                      "Ref": "wfmwfmCustomerConfig2F0732CB"
                    }
                  ]
                ]
              }
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmCreateWorkflowFB320128",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "wfmwfmCreateWorkflowFB320128",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmUpdateWorkflowD0F5251A",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "wfmwfmUpdateWorkflowD0F5251A",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmGetWorkflowA5699550",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "wfmwfmGetWorkflowA5699550",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmDeleteWorkflow4BF3C63D",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "wfmwfmDeleteWorkflow4BF3C63D",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Eval078d40d3fb4e4d5394a79c46fc11fe029D0ED2B4",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Eval078d40d3fb4e4d5394a79c46fc11fe029D0ED2B4",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Eval41256dc5445742738ed917bc818694e54EB1134F",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Eval41256dc5445742738ed917bc818694e54EB1134F",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "wfmwfmSNSTopicC0158A89"
              }
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackId"
                    },
                    "-wfm-SNSTopic-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "wfmWFMWorkflowsSMRoleDefaultPolicyFA2D5633",
        "Roles": [
          {
            "Ref": "wfmWFMWorkflowsSMRole9AC556AD"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "SPCM for IAM policy document is higher than 25"
            },
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmWFMWorkflowsSM4F2EDA69": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{\"StartAt\":\"GetCustomerConfig\",\"States\":{\"GetCustomerConfig\":{\"Next\":\"Determine Workflow Request Type\",\"Type\":\"Task\",\"ResultPath\":\"$.customerConfig\",\"ResultSelector\":{\"customerId.$\":\"$.Item.customerId.S\",\"amcApiEndpoint.$\":\"$.Item.amcApiEndpoint.S\",\"invokeAmcApiRoleArn.$\":\"$.Item.invokeAmcApiRoleArn.S\",\"outputSNSTopicArn.$\":\"$.Item.outputSNSTopicArn.S\",\"amcRegion.$\":\"$.Item.amcRegion.S\"},\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::dynamodb:getItem\",\"Parameters\":{\"Key\":{\"customerId\":{\"S.$\":\"$.customerId\"}},\"TableName\":\"",
              {
                "Ref": "wfmwfmCustomerConfig2F0732CB"
              },
              "\",\"ConsistentRead\":false}},\"Determine Workflow Request Type\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.workflowRequest.requestType\",\"StringEquals\":\"createWorkflow\",\"Next\":\"Create Workflow\"},{\"Variable\":\"$.workflowRequest.requestType\",\"StringEquals\":\"updateWorkflow\",\"Next\":\"Update Workflow\"},{\"Variable\":\"$.workflowRequest.requestType\",\"StringEquals\":\"getWorkflow\",\"Next\":\"Get Workflow\"},{\"Variable\":\"$.workflowRequest.requestType\",\"StringEquals\":\"deleteWorkflow\",\"Next\":\"Delete Workflow\"}],\"Default\":\"Invalid Workflow Request Type\"},\"Invalid Workflow Request Type\":{\"Type\":\"Fail\"},\"Create Workflow\":{\"Next\":\"Evaluate Workflow Status Response\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
              {
                "Fn::GetAtt": [
                  "wfmwfmCreateWorkflowFB320128",
                  "Arn"
                ]
              },
              "\",\"Payload.$\":\"$\"}},\"Evaluate Workflow Status Response\":{\"Type\":\"Choice\",\"Choices\":[{\"Or\":[{\"Not\":{\"Variable\":\"$.responseStatus\",\"IsPresent\":true}},{\"Not\":{\"Or\":[{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"CREATED\"},{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"UPDATED\"},{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"RECEIVED\"},{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"DELETED\"}]}}],\"Next\":\"Set Execution as Failed\"}],\"Default\":\"Set Message Notification Subject\"},\"Update Workflow\":{\"Next\":\"Evaluate Workflow Status Response\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
              {
                "Fn::GetAtt": [
                  "wfmwfmUpdateWorkflowD0F5251A",
                  "Arn"
                ]
              },
              "\",\"Payload.$\":\"$\"}},\"Get Workflow\":{\"Next\":\"Evaluate Workflow Status Response\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
              {
                "Fn::GetAtt": [
                  "wfmwfmGetWorkflowA5699550",
                  "Arn"
                ]
              },
              "\",\"Payload.$\":\"$\"}},\"Delete Workflow\":{\"Next\":\"Evaluate Workflow Status Response\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
              {
                "Fn::GetAtt": [
                  "wfmwfmDeleteWorkflow4BF3C63D",
                  "Arn"
                ]
              },
              "\",\"Payload.$\":\"$\"}},\"Set Message Notification Subject\":{\"Next\":\"Set SNS message content\",\"Type\":\"Task\",\"ResultPath\":\"$.messageSubject\",\"Resource\":\"",
              {
                "Fn::GetAtt": [
                  "Eval078d40d3fb4e4d5394a79c46fc11fe029D0ED2B4",
                  "Arn"
                ]
              },
              "\",\"Parameters\":{\"expression\":\"`${$.customerId} ${$.workflowRequest.requestType} for ${$.workflowRequest.workflowId} ${$.responseStatus}`.slice(0,100)\",\"expressionAttributeValues\":{\"$.customerId.$\":\"$.customerId\",\"$.workflowRequest.requestType.$\":\"$.workflowRequest.requestType\",\"$.workflowRequest.workflowId.$\":\"$.workflowRequest.workflowId\",\"$.responseStatus.$\":\"$.responseStatus\"}}},\"Set Execution as Failed\":{\"Next\":\"Set Message Notification Subject\",\"Type\":\"Task\",\"ResultPath\":\"$.responseStatus\",\"Resource\":\"",
              {
                "Fn::GetAtt": [
                  "Eval41256dc5445742738ed917bc818694e54EB1134F",
                  "Arn"
                ]
              },
              "\",\"Parameters\":{\"expression\":\"`FAILED`\",\"expressionAttributeValues\":{}}},\"Set SNS message content\":{\"Type\":\"Pass\",\"ResultPath\":\"$.snsMessage\",\"Parameters\":{\"default.$\":\"States.JsonToString($)\",\"email.$\":\"States.JsonToString($)\"},\"Next\":\"Set Workflow Notification Body\"},\"Set Workflow Notification Body\":{\"Next\":\"Publish Message To SNS\",\"Type\":\"Task\",\"ResultPath\":\"$.snsMessage.email\",\"Resource\":\"",
              {
                "Fn::GetAtt": [
                  "Eval078d40d3fb4e4d5394a79c46fc11fe029D0ED2B4",
                  "Arn"
                ]
              },
              "\",\"Parameters\":{\"expression\":\"`${$.messageSubject}\\n\\nCustomer ID: ${$.customerId}\\nRequest Type: ${$.workflowRequest.requestType}\\nWorkflow ID: ${$.workflowRequest.workflowId}\\nResponse Status: ${$.responseStatus}\\nResponse Message: ${$.responseMessage}\\n\\n\\nWorkflow Request:\\n${$.snsMessage.default}`\",\"expressionAttributeValues\":{\"$.messageSubject.$\":\"$.messageSubject\",\"$.customerId.$\":\"$.customerId\",\"$.workflowRequest.requestType.$\":\"$.workflowRequest.requestType\",\"$.workflowRequest.workflowId.$\":\"$.workflowRequest.workflowId\",\"$.responseStatus.$\":\"$.responseStatus\",\"$.responseMessage.$\":\"$.responseMessage\",\"$.snsMessage.default.$\":\"$.snsMessage.default\"}}},\"Publish Message To SNS\":{\"Next\":\"Final Status Check\",\"Type\":\"Task\",\"ResultPath\":\"$.SNSResponse\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::sns:publish\",\"Parameters\":{\"TopicArn\":\"",
              {
                "Ref": "wfmwfmSNSTopicC0158A89"
              },
              "\",\"Message.$\":\"States.JsonToString($.snsMessage)\",\"MessageStructure\":\"json\",\"MessageAttributes\":{\"customerId\":{\"DataType\":\"String\",\"StringValue.$\":\"$.customerId\"},\"requestType\":{\"DataType\":\"String\",\"StringValue.$\":\"$.workflowRequest.requestType\"},\"responseStatus\":{\"DataType\":\"String\",\"StringValue.$\":\"$.responseStatus\"}},\"Subject.$\":\"$.messageSubject\"}},\"Final Status Check\":{\"Type\":\"Choice\",\"Choices\":[{\"Or\":[{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"CREATED\"},{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"UPDATED\"},{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"RECEIVED\"},{\"Variable\":\"$.responseStatus\",\"StringEquals\":\"DELETED\"}],\"Next\":\"Successfully processed Workflow Request\"}],\"Default\":\"Failed to process workflow request\"},\"Failed to process workflow request\":{\"Type\":\"Fail\"},\"Successfully processed Workflow Request\":{\"Type\":\"Succeed\"}}}"
            ]
          ]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": [
                    "wfmWFMWorkflowsSMLogGroupA1637951",
                    "Arn"
                  ]
                }
              }
            }
          ],
          "Level": "ALL"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "wfmWFMWorkflowsSMRole9AC556AD",
            "Arn"
          ]
        },
        "StateMachineName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-wfm-workflows"
            ]
          ]
        }
      },
      "DependsOn": [
        "wfmWFMWorkflowsSMRoleDefaultPolicyFA2D5633",
        "wfmWFMWorkflowsSMRole9AC556AD"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "Eval078d40d3fb4e4d5394a79c46fc11fe02ServiceRoleDD279E15": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "Eval078d40d3fb4e4d5394a79c46fc11fe029D0ED2B4": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "Eval078d40d3fb4e4d5394a79c46fc11fe029D0ED2B48c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "Eval078d40d3fb4e4d5394a79c46fc11fe02ServiceRoleDD279E15",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x"
      },
      "DependsOn": [
        "Eval078d40d3fb4e4d5394a79c46fc11fe02ServiceRoleDD279E15"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      }
    },
    "Eval41256dc5445742738ed917bc818694e5ServiceRoleA1AB6027": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "Eval41256dc5445742738ed917bc818694e54EB1134F": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "Eval41256dc5445742738ed917bc818694e54EB1134F8c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "Eval41256dc5445742738ed917bc818694e5ServiceRoleA1AB6027",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x"
      },
      "DependsOn": [
        "Eval41256dc5445742738ed917bc818694e5ServiceRoleA1AB6027"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      }
    },
    "tpsSyncAMCTemplateAMCInitializeTemplateLambdaIamPolicyE02EBFA5": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:List*",
                "s3:Get*",
                "s3:Put*",
                "s3:Delete*"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": [
                    {
                      "Ref": "AWS::AccountId"
                    }
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "bucketsartifactsE01AF792"
                    },
                    "/tps/scripts/adtech/*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "tpsSyncAMCTemplateAMCInitializeTemplateLambdaIamPolicyE02EBFA5",
        "Roles": [
          {
            "Ref": "tpsSyncAMCTemplateSyncAMCInitializeTemplateRoleBFFEC864"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsSyncAMCTemplateSyncAMCInitializeTemplateRoleBFFEC864": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsSyncAMCTemplateSyncAMCInitializeTemplateRoleDefaultPolicy63040C8E": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "bucketsartifactsbucketkey192CFE4E",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "tpsSyncAMCTemplateSyncAMCInitializeTemplateRoleDefaultPolicy63040C8E",
        "Roles": [
          {
            "Ref": "tpsSyncAMCTemplateSyncAMCInitializeTemplateRoleBFFEC864"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsSyncAMCTemplateSyncAMCInitializeTemplateA2A4E572": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "tpsSyncAMCTemplateSyncAMCInitializeTemplateA2A4E5728c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Lambda function for custom resource for placing the AMC initialize template to the S3 artifacts bucket",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Handler": "sync_amc_initialize_template.event_handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "tpsSyncAMCTemplateSyncAMCInitializeTemplateRoleBFFEC864",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 300
      },
      "DependsOn": [
        "bucketsartifactsPolicyCB476A7C",
        "bucketsartifactsE01AF792",
        "tpsSyncAMCTemplateSyncAMCInitializeTemplateRoleDefaultPolicy63040C8E",
        "tpsSyncAMCTemplateSyncAMCInitializeTemplateRoleBFFEC864"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsSyncAMCTemplateamcinitializetemplatelambdaalarmamcinitializetemplatelambdaalarmthrottlesE48F6B6B": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "tpsSyncAMCTemplateSyncAMCInitializeTemplateA2A4E572"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsSyncAMCTemplateamcinitializetemplatelambdaalarmamcinitializetemplatelambdaalarmerrors0EF21E0C": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "tpsSyncAMCTemplateSyncAMCInitializeTemplateA2A4E572"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsSyncAMCTemplateAMCInitializeTemplateCustomResource289BA92F": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "tpsSyncAMCTemplateSyncAMCInitializeTemplateA2A4E572",
            "Arn"
          ]
        },
        "artifacts_bucket_name": {
          "Ref": "bucketsartifactsE01AF792"
        },
        "artifacts_key_prefix": "tps/scripts/adtech/"
      },
      "DependsOn": [
        "tpsSyncAMCTemplateAMCInitializeTemplateLambdaIamPolicyE02EBFA5"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpstpsmasterkey6E5A31B6": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "TPS Service Master Key",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PendingWindowInDays": 30
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpstpsmasterkeyAliasB81E5A43": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "",
            [
              "alias/",
              {
                "Ref": "AWS::StackName"
              },
              "-tps-adtech-master-key"
            ]
          ]
        },
        "TargetKeyId": {
          "Fn::GetAtt": [
            "tpstpsmasterkey6E5A31B6",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpstpsCustomerConfigDCD9A325": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "customerId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "customerName",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "customerId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "customerName",
            "KeyType": "RANGE"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "tpstpsmasterkey6E5A31B6",
              "Arn"
            ]
          },
          "SSEEnabled": true,
          "SSEType": "KMS"
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsmetricslayerB8D49EA6": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [
          "python3.9"
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "tpsmetricslayerB8D49EA68c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "LayerName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-metrics-layer"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsAddAMCInstanceRole85145E9C": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "IAM role should not allow * resource on its permissions policy"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsaddamcinstanceallowpolicy21453696": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:CreateBucket",
                "s3:ListBucket",
                "s3:PutBucketPolicy",
                "s3:PutBucketAcl",
                "s3:PutBucketPublicAccessBlock",
                "s3:PutAccountPublicAccessBlock",
                "s3:GetAccountPublicAccessBlock",
                "s3:GetBucketPublicAccessBlock",
                "s3:PutBucketNotification",
                "s3:PutBucketTagging",
                "s3:GetBucketAcl",
                "s3:GetBucketNotification",
                "s3:GetEncryptionConfiguration",
                "s3:PutEncryptionConfiguration",
                "s3:GetBucketPolicy",
                "s3:GetBucketPolicyStatus",
                "s3:DeleteBucketPolicy",
                "s3:DeleteBucket",
                "s3:GetBucketOwnershipControls",
                "s3:PutBucketOwnershipControls",
                "s3:GetObject",
                "s3:PutObject",
                "s3:PutBucketVersioning"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": [
                    {
                      "Ref": "AWS::AccountId"
                    }
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": [
                "arn:aws:s3:::amc*",
                {
                  "Fn::GetAtt": [
                    "bucketsartifactsE01AF792",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "bucketsartifactsE01AF792",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:GetObject",
                "s3:PutObject"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": [
                    {
                      "Ref": "AWS::AccountId"
                    }
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::*/",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Action": "kms:CreateKey",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "kms:TagResource",
                "kms:CreateAlias",
                "kms:UpdateAlias",
                "kms:DescribeKey",
                "kms:PutKeyPolicy",
                "kms:ScheduleKeyDeletion",
                "kms:DeleteAlias"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:kms:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":key/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:kms:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":alias/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey",
                "kms:GetKeyPolicy"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "bucketsartifactsbucketkey192CFE4E",
                  "Arn"
                ]
              }
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/service-role/",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "cloudformation:GetTemplate",
                "cloudformation:GetTemplateSummary",
                "cloudformation:ListStacks",
                "cloudformation:ValidateTemplate",
                "cloudformation:CreateChangeSet",
                "cloudformation:CreateStack",
                "cloudformation:DeleteChangeSet",
                "cloudformation:DeleteStack",
                "cloudformation:DescribeChangeSet",
                "cloudformation:DescribeStacks",
                "cloudformation:ExecuteChangeSet",
                "cloudformation:SetStackPolicy",
                "cloudformation:UpdateStack",
                "cloudformation:DescribeStackResource"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:cloudformation:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":stack/",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:cloudformation:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":stack/tps*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:cloudformation:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":aws:transform/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "events:Put*",
                "events:Create*",
                "events:List*",
                "events:Describe*",
                "events:EnableRule",
                "events:ActivateEventSource",
                "events:DeactivateEventSource",
                "events:DeleteRule",
                "events:RemoveTargets",
                "events:RemovePermission"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:events:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":event-bus/default"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:events:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":rule/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "iam:GetPolicyVersion",
                "iam:CreateRole",
                "iam:PutRolePolicy",
                "iam:CreatePolicyVersion",
                "iam:GetRole",
                "iam:GetPolicy",
                "iam:CreatePolicy",
                "iam:UpdateRole",
                "iam:GetRolePolicy",
                "iam:DeleteRolePolicy",
                "iam:DeleteRole"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":policy/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "sns:GetTopicAttributes",
                "sns:CreateTopic",
                "sns:SetTopicAttributes",
                "sns:TagResource"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sns:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "tpsaddamcinstanceallowpolicy21453696",
        "Roles": [
          {
            "Ref": "tpsAddAMCInstanceRole85145E9C"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsaddamcinstancedenypolicyA13924D9": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "iam:*",
              "Effect": "Deny",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/",
                      {
                        "Ref": "tpsAddAMCInstanceRole85145E9C"
                      },
                      "*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":policy/tpsaddamcinstanceallowpolicy21453696"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "tpsaddamcinstancedenypolicyA13924D9",
        "Roles": [
          {
            "Ref": "tpsAddAMCInstanceRole85145E9C"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpslambdabasicrolepolicy82C7BCC9": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:logs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":log-group:/aws/lambda/*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "tpslambdabasicrolepolicy82C7BCC9",
        "Roles": [
          {
            "Ref": "tpsAddAMCInstanceRole85145E9C"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsAddAmcInstance2C7C84B8": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "tpsAddAmcInstance2C7C84B88c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Creates/Updates TPS customer stacks",
        "Environment": {
          "Variables": {
            "TEMPLATE_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "bucketsartifactsE01AF792"
                  },
                  ".s3.amazonaws.com/tps/scripts/adtech/scripts"
                ]
              ]
            },
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "ADD_AMC_INSTANCE_LAMBDA_ROLE_ARN": {
              "Fn::GetAtt": [
                "tpsAddAMCInstanceRole85145E9C",
                "Arn"
              ]
            },
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "DATA_LAKE_ENABLED": {
              "Ref": "ShouldDeployDataLake"
            },
            "WFM_LAMBDA_ROLE_NAMES": {
              "Fn::Join": [
                "",
                [
                  "\n                    ",
                  {
                    "Ref": "wfmwfmCheckWorkflowExeuctionStatusServiceRole41FB9F9D"
                  },
                  ",\n                    ",
                  {
                    "Ref": "wfmwfmCreateWorkflowExecutionServiceRole1B42212B"
                  },
                  ",\n                    ",
                  {
                    "Ref": "wfmwfmCancelWorkflowExecutionLambdaServiceRoleC4A54E9D"
                  },
                  ",\n                    ",
                  {
                    "Ref": "wfmwfmCreateWorkflowServiceRole3D5505DA"
                  },
                  ",\n                    ",
                  {
                    "Ref": "wfmwfmUpdateWorkflowServiceRole5ADF273D"
                  },
                  ",\n                    ",
                  {
                    "Ref": "wfmwfmGetWorkflowServiceRole74A84048"
                  },
                  ",\n                    ",
                  {
                    "Ref": "wfmwfmDeleteWorkflowServiceRoleCD0ADAB9"
                  },
                  ",\n                    ",
                  {
                    "Ref": "wfmwfmGetWorkflowExecutionSummaryServiceRole13A909F0"
                  },
                  "\n                    "
                ]
              ]
            },
            "SNS_KMS_KEY_ID": {
              "Ref": "wfmwfmmasterkey6D11631E"
            },
            "APPLICATION_ACCOUNT": {
              "Ref": "AWS::AccountId"
            },
            "APPLICATION_REGION": {
              "Ref": "AWS::Region"
            },
            "LOGGING_BUCKET_NAME": {
              "Ref": "bucketslogging3F0A1C76"
            },
            "ARTIFACTS_BUCKET_NAME": {
              "Ref": "bucketsartifactsE01AF792"
            },
            "ARTIFACTS_BUCKET_KEY_ID": {
              "Ref": "bucketsartifactsbucketkey192CFE4E"
            },
            "API_INVOKE_ROLE_STANDARD": {
              "Ref": "wfmApiInvokeRoleStandardFA4D634A"
            },
            "ROUTING_QUEUE_LOGICAL_ID": "datalakepipelinedatalakeroutingBEE8F1BC",
            "STAGE_A_ROLE_LOGICAL_ID": "datalakepipelinesdlfstageaprocessaServiceRole15419483"
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-tps-AddAmcInstance"
            ]
          ]
        },
        "Handler": "handler.handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "tpsmetricslayerB8D49EA6"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "tpsAddAMCInstanceRole85145E9C",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 600
      },
      "DependsOn": [
        "tpsAddAMCInstanceRole85145E9C"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsAddAmcInstanceStatusCheck9C3EC256": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "tpsAddAmcInstanceStatusCheck9C3EC2568c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Checks if TPS customer stacks have finished (success/failure)",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-tps-AddAmcInstanceStatusCheck"
            ]
          ]
        },
        "Handler": "handler.handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "tpsmetricslayerB8D49EA6"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "tpsAddAMCInstanceRole85145E9C",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 900
      },
      "DependsOn": [
        "tpsAddAMCInstanceRole85145E9C"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpspostDeployMetadataInstanceConfigServiceRole9DF82DC0": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpspostDeployMetadataInstanceConfigServiceRoleDefaultPolicy54636F33": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "tpstpsmasterkey6E5A31B6",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "tpstpsCustomerConfigDCD9A325",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "wfmwfmmasterkey6D11631E",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmCustomerConfig2F0732CB",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "tpspostDeployMetadataInstanceConfigServiceRoleDefaultPolicy54636F33",
        "Roles": [
          {
            "Ref": "tpspostDeployMetadataInstanceConfigServiceRole9DF82DC0"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpspostDeployMetadataInstanceConfigB09B4E89": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "tpspostDeployMetadataInstanceConfigB09B4E898c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Adds TPS customer information to SDLF and WFM DynamoDB tables",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "Region": {
              "Ref": "AWS::Region"
            },
            "DATA_LAKE_ENABLED": {
              "Ref": "ShouldDeployDataLake"
            },
            "WFM_CUSTOMER_CONFIG_TABLE": {
              "Ref": "wfmwfmCustomerConfig2F0732CB"
            },
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "AWS_ACCOUNT_ID": {
              "Ref": "AWS::AccountId"
            },
            "TPS_CUSTOMER_CONFIG_TABLE": {
              "Ref": "tpstpsCustomerConfigDCD9A325"
            },
            "APPLICATION_REGION": {
              "Ref": "AWS::Region"
            },
            "API_INVOKE_ROLE_STANDARD": {
              "Ref": "wfmApiInvokeRoleStandardFA4D634A"
            },
            "SDLF_CUSTOMER_CONFIG_LOGICAL_ID": "foundationssdlfCustomerConfig45371CE6",
            "CLOUD_TRAIL_ARN": {
              "Fn::GetAtt": [
                "cloudtrailS3AndLambda4948E025",
                "Arn"
              ]
            }
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-tps-postDeployMetadataInstanceConfig"
            ]
          ]
        },
        "Handler": "handler.handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "tpsmetricslayerB8D49EA6"
          }
        ],
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "tpspostDeployMetadataInstanceConfigServiceRole9DF82DC0",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 600
      },
      "DependsOn": [
        "tpspostDeployMetadataInstanceConfigServiceRoleDefaultPolicy54636F33",
        "tpspostDeployMetadataInstanceConfigServiceRole9DF82DC0"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpspostDeployMetadataInstanceConfigPolicy0F6E09FA": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:CreateGrant*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "tpstpsmasterkey6E5A31B6",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "wfmwfmmasterkey6D11631E",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Action": "cloudformation:DescribeStackResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:cloudformation:*:",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":stack/",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "cloudtrail:GetEventSelectors",
                "cloudtrail:PutEventSelectors",
                "cloudtrail:GetTrail",
                "cloudtrail:ListTrails",
                "cloudtrail:UpdateTrail"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "cloudtrailS3AndLambda4948E025",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "tpspostDeployMetadataInstanceConfigPolicy0F6E09FA",
        "Roles": [
          {
            "Ref": "tpspostDeployMetadataInstanceConfigServiceRole9DF82DC0"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsPutCloudWatchMetricsPolicy704B891F": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "amcinsights"
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "tpsPutCloudWatchMetricsPolicy704B891F",
        "Roles": [
          {
            "Ref": "tpsAddAMCInstanceRole85145E9C"
          },
          {
            "Ref": "tpspostDeployMetadataInstanceConfigServiceRole9DF82DC0"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpstpsinitializeamcloggroup48D7D9F9": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/vendedlogs/states/",
              {
                "Ref": "AWS::StackName"
              },
              "-tps-initialize-amc-",
              {
                "Fn::Select": [
                  2,
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId"
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "CloudWatchLogs LogGroup should specify a KMS Key Id to encrypt the log data"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpstpsinitializeamcsfnjobroleFA5B3D50": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "states.",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".amazonaws.com"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpstpsinitializeamcsfnjobpolicy20080AEA": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:lambda:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":function:",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "states:DescribeExecution",
                "states:StopExecution"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:states:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":stateMachine:",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-tps-*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "events:DescribeRule",
                "events:PutTargets",
                "events:PutRule"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:events:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":rule/StepFunctionsGetEventsForStepFunctionsExecutionRule"
                  ]
                ]
              }
            },
            {
              "Action": [
                "logs:CreateLogDelivery",
                "logs:CreateLogStream",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutLogEvents",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "Roles": [
          {
            "Ref": "tpstpsinitializeamcsfnjobroleFA5B3D50"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W13",
              "reason": "IAM managed policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpstpsinitializeamcC245F2A8": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{\n    \"Comment\": \"Simple pseudo flow\",\n    \"StartAt\": \"Try\",\n    \"States\": {\n        \"Try\": {\n            \"Type\": \"Parallel\",\n            \"Branches\": [\n                {\n                    \"StartAt\": \"Process AMC Instance Request\",\n                    \"States\": {\n                        \"Process AMC Instance Request\": {\n                            \"Type\": \"Task\",\n                            \"Resource\": \"",
              {
                "Fn::GetAtt": [
                  "tpsAddAmcInstance2C7C84B8",
                  "Arn"
                ]
              },
              "\",\n                            \"Comment\": \"Process AMC Instance Request\",\n                            \"ResultPath\": \"$.body.stackId\",\n                            \"Next\": \"Wait\"\n                        },\n                        \"Wait\": {\n                            \"Type\": \"Wait\",\n                            \"Seconds\": 45,\n                            \"Next\": \"Get Stack status\"\n                        },\n                        \"Get Stack status\": {\n                            \"Type\": \"Task\",\n                            \"Resource\": \"",
              {
                "Fn::GetAtt": [
                  "tpsAddAmcInstanceStatusCheck9C3EC256",
                  "Arn"
                ]
              },
              "\",\n                            \"ResultPath\": \"$.body.stackStatus\",\n                            \"Next\": \"Did Job finish?\"\n                        },\n                        \"Did Job finish?\": {\n                            \"Type\": \"Choice\",\n                            \"Choices\": [\n                                {\n                                    \"Variable\": \"$.body.stackStatus\",\n                                    \"StringEquals\": \"CREATE_COMPLETE\",\n                                    \"Next\": \"Post-deploy update config tables\"\n                                },\n                                {\n                                    \"Variable\": \"$.body.stackStatus\",\n                                    \"StringEquals\": \"UPDATE_COMPLETE\",\n                                    \"Next\": \"Post-deploy update config tables\"\n                                },\n                                {\n                                    \"Variable\": \"$.body.stackStatus\",\n                                    \"StringEquals\": \"FAILED\",\n                                    \"Next\": \"Stack Failed\"\n                                }\n                            ],\n                            \"Default\": \"Wait\"\n                        },\n                        \"Stack Failed\": {\n                            \"Type\": \"Fail\",\n                            \"Error\": \"Stack Failed\",\n                            \"Cause\": \"Stack failed, please check the logs\"\n                        },\n                        \"Post-deploy update config tables\": {\n                            \"Type\": \"Task\",\n                            \"Resource\": \"",
              {
                "Fn::GetAtt": [
                  "tpspostDeployMetadataInstanceConfigB09B4E89",
                  "Arn"
                ]
              },
              "\",\n                            \"Comment\": \"Post-deploy update config tables\",\n                            \"ResultPath\": \"$.statusCode\",\n                            \"End\": true\n                        }\n                    }\n                }\n            ],\n            \"Catch\": [\n                {\n                    \"ErrorEquals\": [\n                        \"States.ALL\"\n                    ],\n                    \"ResultPath\": null,\n                    \"Next\": \"Failed\"\n                }\n            ],\n            \"Next\": \"Done\"\n        },\n        \"Done\": {\n            \"Type\": \"Succeed\"\n        },\n        \"Failed\": {\n            \"Type\": \"Fail\"\n        }\n    }\n}"
            ]
          ]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": [
                    "tpstpsinitializeamcloggroup48D7D9F9",
                    "Arn"
                  ]
                }
              }
            }
          ],
          "IncludeExecutionData": false,
          "Level": "ALL"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "tpstpsinitializeamcsfnjobroleFA5B3D50",
            "Arn"
          ]
        },
        "StateMachineName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-tps-initialize-amc"
            ]
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsInvokeTPSInitializeSMServiceRole485EF762": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsInvokeTPSInitializeSMServiceRoleDefaultPolicyD1E70663": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:states:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":stateMachine:",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-tps-*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "sqs:List*",
                "sqs:ReceiveMessage",
                "sqs:SendMessage*",
                "sqs:DeleteMessage*",
                "sqs:GetQueue*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:sqs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-tps-*"
                  ]
                ]
              }
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "amcinsights"
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "tpsInvokeTPSInitializeSMServiceRoleDefaultPolicyD1E70663",
        "Roles": [
          {
            "Ref": "tpsInvokeTPSInitializeSMServiceRole485EF762"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "IAM policy should not allow * resource"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsInvokeTPSInitializeSMA7ED9BB3": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "tpsInvokeTPSInitializeSMA7ED9BB38c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Triggers the AMC Instance Setup state machine",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "METRICS_NAMESPACE": "amcinsights",
            "STATE_MACHINE_ARN": {
              "Fn::GetAtt": [
                "tpstpsinitializeamcC245F2A8",
                "Arn"
              ]
            },
            "DATASET_NAME": "amc",
            "TEAM_NAME": "adtech",
            "APPLICATION_ACCOUNT": {
              "Ref": "AWS::AccountId"
            },
            "DEFAULT_SNS_TOPIC": {
              "Ref": "wfmwfmSNSTopicC0158A89"
            },
            "RESOURCE_PREFIX": {
              "Ref": "AWS::StackName"
            },
            "STACK_NAME": {
              "Ref": "AWS::StackName"
            },
            "APPLICATION_REGION": {
              "Ref": "AWS::Region"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-tps-InvokeTPSInitializeSM"
            ]
          ]
        },
        "Handler": "handler.handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "tpsmetricslayerB8D49EA6"
          }
        ],
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "tpsInvokeTPSInitializeSMServiceRole485EF762",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 30
      },
      "DependsOn": [
        "tpsInvokeTPSInitializeSMServiceRoleDefaultPolicyD1E70663",
        "tpsInvokeTPSInitializeSMServiceRole485EF762"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "platformmanagerSyncPlatformManagerPlatformManagerLambdaIamPolicy2CA91385": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:List*",
                "s3:Get*",
                "s3:Put*",
                "s3:Delete*"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:ResourceAccount": [
                    {
                      "Ref": "AWS::AccountId"
                    }
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "bucketsartifactsE01AF792"
                    },
                    "/platform_notebook_manager_samples/*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "platformmanagerSyncPlatformManagerPlatformManagerLambdaIamPolicy2CA91385",
        "Roles": [
          {
            "Ref": "platformmanagerSyncPlatformManagerSyncPlatformManagerRole5F5C5583"
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "platformmanagerSyncPlatformManagerSyncPlatformManagerRole5F5C5583": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "platformmanagerSyncPlatformManagerSyncPlatformManagerRoleDefaultPolicy986A7D64": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "bucketsartifactsbucketkey192CFE4E",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "platformmanagerSyncPlatformManagerSyncPlatformManagerRoleDefaultPolicy986A7D64",
        "Roles": [
          {
            "Ref": "platformmanagerSyncPlatformManagerSyncPlatformManagerRole5F5C5583"
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "platformmanagerSyncPlatformManager14317DE2": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "platformmanagerSyncPlatformManager14317DE28c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Lambda function for custom resource for placing the platform manager to the S3 artifacts bucket",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1"
          }
        },
        "Handler": "sync_platform_manager.event_handler",
        "Layers": [
          {
            "Ref": "SolutionsLayerC3651413193"
          },
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "platformmanagerSyncPlatformManagerSyncPlatformManagerRole5F5C5583",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 300
      },
      "DependsOn": [
        "bucketsartifactsbucketkey192CFE4E",
        "platformmanagerSyncPlatformManagerSyncPlatformManagerRoleDefaultPolicy986A7D64",
        "platformmanagerSyncPlatformManagerSyncPlatformManagerRole5F5C5583"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "platformmanagerSyncPlatformManagerplatformmanagerlambdaalarmplatformmanagerlambdaalarmthrottles8BE38045": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "platformmanagerSyncPlatformManager14317DE2"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "platformmanagerSyncPlatformManagerplatformmanagerlambdaalarmplatformmanagerlambdaalarmerrors3F82C304": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "platformmanagerSyncPlatformManager14317DE2"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "platformmanagerSyncPlatformManagerPlatformManagerCustomResourceB3A77061": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "platformmanagerSyncPlatformManager14317DE2",
            "Arn"
          ]
        },
        "artifacts_bucket_name": {
          "Ref": "bucketsartifactsE01AF792"
        },
        "artifacts_key_prefix": "platform_notebook_manager_samples/"
      },
      "DependsOn": [
        "platformmanagerSyncPlatformManagerPlatformManagerLambdaIamPolicy2CA91385"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "platformmanagerplatformmanagertablekeyCB247857": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Platform-Manager Table Key",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PendingWindowInDays": 30
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "platformmanagerplatformmanagertablekeyAlias0BFD552F": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "",
            [
              "alias/",
              {
                "Ref": "AWS::StackName"
              },
              "-pmn-sagemaker-cmk"
            ]
          ]
        },
        "TargetKeyId": {
          "Fn::GetAtt": [
            "platformmanagerplatformmanagertablekeyCB247857",
            "Arn"
          ]
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "platformmanagerplatformmanagerrole07D31A4A": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "sagemaker.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "platformmanagerplatformmanagerroleDefaultPolicy74CE69C8": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "bucketsartifactsbucketkey192CFE4E",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "platformmanagerplatformmanagerroleDefaultPolicy74CE69C8",
        "Roles": [
          {
            "Ref": "platformmanagerplatformmanagerrole07D31A4A"
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "platformmanagerplatformmanagerpolicyE0201C06": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "wfmwfmInvokeWorkflowExecutionSMA305784A",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "wfmwfmInvokeWorkflowSMA913F662",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "wfmwfmCreateWorkflowSchedule332BD3C0",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "wfmwfmDeleteWorkflowSchedule7328E733",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "tpsInvokeTPSInitializeSMA7ED9BB3",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Action": "s3:ListBucket",
              "Condition": {
                "StringLike": {
                  "s3:prefix": [
                    "platform_notebook_manager_samples/*"
                  ]
                }
              },
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "bucketsartifactsE01AF792",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "s3:GetObject",
                "s3:PutObject"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "bucketsartifactsE01AF792",
                        "Arn"
                      ]
                    },
                    "/platform_notebook_manager_samples/*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:ListBucket"
              ],
              "Condition": {
                "StringNotEquals": {
                  "aws:ResourceAccount": [
                    {
                      "Ref": "AWS::AccountId"
                    }
                  ]
                }
              },
              "Effect": "Deny",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "bucketsartifactsE01AF792",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "bucketsartifactsE01AF792",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Sid": "AccessS3BucketsOwnedBySpecificAWSAccountsOnly"
            }
          ],
          "Version": "2012-10-17"
        },
        "Roles": [
          {
            "Ref": "platformmanagerplatformmanagerrole07D31A4A"
          }
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "platformmanagerplatformmanagerlc9BA44C6F": {
      "Type": "AWS::SageMaker::NotebookInstanceLifecycleConfig",
      "Properties": {
        "OnStart": [
          {
            "Content": {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "\n                    #!/bin/bash\n                                \n                    set -e\n\n                    # Parameters\n                    IDLE_TIME=900\n                    S3_BUCKET=",
                    {
                      "Ref": "bucketsartifactsE01AF792"
                    },
                    "\n                    INVOKE_WORKFLOW_EXECUTION_SM_NAME=\"INVOKE_WORKFLOW_EXECUTION_SM_NAME=",
                    {
                      "Ref": "wfmwfmInvokeWorkflowExecutionSMA305784A"
                    },
                    "\"\n                    INVOKE_WORKFLOW_SM_NAME=\"INVOKE_WORKFLOW_SM_NAME=",
                    {
                      "Ref": "wfmwfmInvokeWorkflowSMA913F662"
                    },
                    "\"\n                    CREATE_WORKFLOW_SCHEDULE_NAME=\"CREATE_WORKFLOW_SCHEDULE_NAME=",
                    {
                      "Ref": "wfmwfmCreateWorkflowSchedule332BD3C0"
                    },
                    "\"\n                    INVOKE_TPS_SM_NAME=\"INVOKE_TPS_SM_NAME=",
                    {
                      "Ref": "tpsInvokeTPSInitializeSMA7ED9BB3"
                    },
                    "\"\n                    DELETE_WORKFLOW_SCHEDULE_NAME=\"DELETE_WORKFLOW_SCHEDULE_NAME=",
                    {
                      "Ref": "wfmwfmDeleteWorkflowSchedule7328E733"
                    },
                    "\"\n                    REGION=\"REGION=",
                    {
                      "Ref": "AWS::Region"
                    },
                    "\"\n                    RULE_PREFIX=\"RULE_PREFIX=",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "\"\n\n                    # Load notebook files to instance       \n                    aws s3 sync s3://$S3_BUCKET/platform_notebook_manager_samples/ /home/ec2-user/SageMaker/\n\n                    # Set instance r/w/x permissions\n                    chmod -R 777 /home/ec2-user/SageMaker/\n\n                    # Create environment variables for interface library\n                    FILE=/home/ec2-user/SageMaker/platform_manager/.env\n                    touch $FILE\n                    grep -qF \"$INVOKE_WORKFLOW_EXECUTION_SM_NAME\" \"$FILE\" || echo \"$INVOKE_WORKFLOW_EXECUTION_SM_NAME\" >> \"$FILE\"\n                    grep -qF \"$INVOKE_WORKFLOW_SM_NAME\" \"$FILE\" || echo \"$INVOKE_WORKFLOW_SM_NAME\" >> \"$FILE\"\n                    grep -qF \"$CREATE_WORKFLOW_SCHEDULE_NAME\" \"$FILE\" || echo \"$CREATE_WORKFLOW_SCHEDULE_NAME\" >> \"$FILE\"\n                    grep -qF \"$INVOKE_TPS_SM_NAME\" \"$FILE\" || echo \"$INVOKE_TPS_SM_NAME\" >> \"$FILE\"\n                    grep -qF \"$DELETE_WORKFLOW_SCHEDULE_NAME\" \"$FILE\" || echo \"$DELETE_WORKFLOW_SCHEDULE_NAME\" >> \"$FILE\"\n                    grep -qF \"$REGION\" \"$FILE\" || echo \"$REGION\" >> \"$FILE\"\n                    grep -qF \"$RULE_PREFIX\" \"$FILE\" || echo \"$RULE_PREFIX\" >> \"$FILE\"\n\n                    # Set default jupyter kernel\n                    sudo -u ec2-user -i << 'EOF'\n                    python -m ipykernel install --user --name python3 --display-name \"amcinsights\"\n                    pip install python-dotenv           \n                    EOF\n\n                    # Load autostop script\n                    echo \"Fetching the autostop script\"\n                    wget https://raw.githubusercontent.com/aws-samples/amazon-sagemaker-notebook-instance-lifecycle-config-samples/master/scripts/auto-stop-idle/autostop.py\n                    echo \"Starting the SageMaker autostop script in cron\"\n                    (crontab -l 2>/dev/null; echo \"*/5 * * * * /usr/bin/python $PWD/autostop.py --time $IDLE_TIME --ignore-connections\") | crontab -\n\n                    # Remove lost+found folder\n                    rm -rf /home/ec2-user/SageMaker/lost+found\n                "
                  ]
                ]
              }
            }
          }
        ]
      },
      "DependsOn": [
        "platformmanagerplatformmanagerroleDefaultPolicy74CE69C8",
        "platformmanagerplatformmanagerrole07D31A4A"
      ],
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "platformmanagerplatformmanagernb80616434": {
      "Type": "AWS::SageMaker::NotebookInstance",
      "Properties": {
        "InstanceType": "ml.t2.medium",
        "KmsKeyId": {
          "Ref": "platformmanagerplatformmanagertablekeyCB247857"
        },
        "LifecycleConfigName": {
          "Fn::GetAtt": [
            "platformmanagerplatformmanagerlc9BA44C6F",
            "NotebookInstanceLifecycleConfigName"
          ]
        },
        "NotebookInstanceName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-amc-insights-platform-manager-notebooks"
            ]
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "platformmanagerplatformmanagerrole07D31A4A",
            "Arn"
          ]
        },
        "RootAccess": "Enabled"
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "integrationpostDeployMetadataInstanceIntegrationConfigPolicy0595BB71": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:CreateGrant*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "foundationscustomerconfigtablekey4114CC54",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "integrationpostDeployMetadataInstanceIntegrationConfigPolicy0595BB71",
        "Roles": [
          {
            "Ref": "tpspostDeployMetadataInstanceConfigServiceRole9DF82DC0"
          }
        ]
      },
      "Condition": "DeployingFullApplication"
    },
    "integrationroutingQueueLambdaIntegrationPolicy8EFE0E3B": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "lambda:AddPermission",
                "lambda:RemovePermission"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "datalakepipelinedatalakeroutingBEE8F1BC",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "integrationroutingQueueLambdaIntegrationPolicy8EFE0E3B",
        "Roles": [
          {
            "Ref": "tpsAddAMCInstanceRole85145E9C"
          }
        ]
      },
      "Condition": "DeployingFullApplication"
    },
    "integrationSDLFCustomerConfigIntegrationPolicy7541D589": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:DescribeTable",
                "dynamodb:GetItem",
                "dynamodb:GetRecords",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
                "dynamodb:DeleteItem",
                "dynamodb:UpdateItem",
                "dynamodb:PutItem"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "foundationssdlfCustomerConfig45371CE6",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "integrationSDLFCustomerConfigIntegrationPolicy7541D589",
        "Roles": [
          {
            "Ref": "tpspostDeployMetadataInstanceConfigServiceRole9DF82DC0"
          }
        ]
      },
      "Condition": "DeployingFullApplication"
    },
    "useriamCreateUserIAMLambdaIamPolicy05BFF285": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:List*",
                "s3:Get*",
                "s3:Put*",
                "s3:Delete*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "bucketsartifactsE01AF792"
                    },
                    "/user-iam/*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "useriamCreateUserIAMLambdaIamPolicy05BFF285",
        "Roles": [
          {
            "Ref": "useriamCreateUserIAMResourcesRoleE9CED8F0"
          }
        ]
      },
      "Condition": "DeployingFullApplication"
    },
    "useriamCreateUserIAMResourcesRoleE9CED8F0": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      },
      "Condition": "DeployingFullApplication"
    },
    "useriamCreateUserIAMResourcesRoleDefaultPolicyD552A92E": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "bucketsartifactsbucketkey192CFE4E",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "useriamCreateUserIAMResourcesRoleDefaultPolicyD552A92E",
        "Roles": [
          {
            "Ref": "useriamCreateUserIAMResourcesRoleE9CED8F0"
          }
        ]
      },
      "Condition": "DeployingFullApplication"
    },
    "useriamCreateUserIAMResourcesC1AE63C0": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "useriamCreateUserIAMResourcesC1AE63C08c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Lambda function for custom resource for creating and placing the user iam resources in the S3 artifacts bucket",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1",
            "STACK_NAME": {
              "Ref": "AWS::StackName"
            },
            "APPLICATION_REGION": {
              "Ref": "AWS::Region"
            },
            "APPLICATION_ACCOUNT": {
              "Ref": "AWS::AccountId"
            },
            "SAGEMAKER_NOTEBOOK": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:sagemaker:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":notebook-instance/",
                  {
                    "Fn::GetAtt": [
                      "platformmanagerplatformmanagernb80616434",
                      "NotebookInstanceName"
                    ]
                  }
                ]
              ]
            },
            "SAGEMAKER_NOTEBOOK_LC": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:sagemaker:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":notebook-instance-lifecycle-config/",
                  {
                    "Fn::GetAtt": [
                      "platformmanagerplatformmanagerlc9BA44C6F",
                      "NotebookInstanceLifecycleConfigName"
                    ]
                  }
                ]
              ]
            },
            "DATALAKE_CUSTOMER_TABLE": {
              "Fn::GetAtt": [
                "foundationssdlfCustomerConfig45371CE6",
                "Arn"
              ]
            },
            "TPS_INITIALIZE_SM_NAME": {
              "Fn::GetAtt": [
                "tpstpsinitializeamcC245F2A8",
                "Name"
              ]
            },
            "WFM_WORKFLOWS_SM_NAME": {
              "Fn::GetAtt": [
                "wfmWFMWorkflowsSM4F2EDA69",
                "Name"
              ]
            },
            "WFM_WORKFLOW_EXECUTION_SM_NAME": {
              "Fn::GetAtt": [
                "wfmWFMExecutionsSM5256870E",
                "Name"
              ]
            },
            "STAGE_A_TRANSFORM_SM_NAME": {
              "Fn::GetAtt": [
                "datalakepipelinesdlfstageasdlflightsmaC45D0F14",
                "Name"
              ]
            },
            "STAGE_B_TRANSFORM_SM_NAME": {
              "Fn::GetAtt": [
                "datalakepipelinesdlfstagebsdlfheavysmb693C8A2C",
                "Name"
              ]
            },
            "WFM_CUSTOMER_TABLE": {
              "Fn::GetAtt": [
                "wfmwfmCustomerConfig2F0732CB",
                "Arn"
              ]
            },
            "WFM_WORKFLOWS_TABLE": {
              "Fn::GetAtt": [
                "wfmwfmWorkflows325855B5",
                "Arn"
              ]
            },
            "WFM_WORKFLOW_EXECUTION_TABLE": {
              "Fn::GetAtt": [
                "wfmwfmWorkflowExecutions11C6BC9C",
                "Arn"
              ]
            },
            "TPS_CUSTOMER_TABLE": {
              "Fn::GetAtt": [
                "tpstpsCustomerConfigDCD9A325",
                "Arn"
              ]
            },
            "OCTAGON_DATASETS_TABLE": {
              "Fn::GetAtt": [
                "foundationsdatasetstableD59647EC",
                "Arn"
              ]
            },
            "OCTAGON_OBJECT_METADATA_TABLE": {
              "Fn::GetAtt": [
                "foundationsmetadatatable05F0F3CF",
                "Arn"
              ]
            },
            "OCTAGON_PIPELINE_EXECUTION_TABLE": {
              "Fn::GetAtt": [
                "foundationspehtable62D09842",
                "Arn"
              ]
            },
            "OCTAON_PIPELINE_TABLE": {
              "Fn::GetAtt": [
                "foundationspipelinestableC835903B",
                "Arn"
              ]
            },
            "DATALAKE_CUSTOMER_TABLE_KEY": {
              "Fn::GetAtt": [
                "foundationscustomerconfigtablekey4114CC54",
                "Arn"
              ]
            },
            "WFM_TABLE_KEY": {
              "Fn::GetAtt": [
                "wfmwfmmasterkey6D11631E",
                "Arn"
              ]
            },
            "TPS_TABLE_KEY": {
              "Fn::GetAtt": [
                "tpstpsmasterkey6E5A31B6",
                "Arn"
              ]
            },
            "ARTIFACTS_BUCKET": {
              "Fn::GetAtt": [
                "bucketsartifactsE01AF792",
                "Arn"
              ]
            },
            "ARTIFACTS_BUCKET_KEY": {
              "Fn::GetAtt": [
                "bucketsartifactsbucketkey192CFE4E",
                "Arn"
              ]
            },
            "LOGGING_BUCKET": {
              "Fn::GetAtt": [
                "bucketslogging3F0A1C76",
                "Arn"
              ]
            },
            "LOGGING_BUCKET_KEY": {
              "Fn::GetAtt": [
                "bucketsloggingbucketkey7DA570E1",
                "Arn"
              ]
            },
            "RAW_BUCKET": {
              "Fn::GetAtt": [
                "foundationsrawbucket6964B12D",
                "Arn"
              ]
            },
            "RAW_BUCKET_KEY": {
              "Fn::GetAtt": [
                "foundationsrawbucketkey4CF96398",
                "Arn"
              ]
            },
            "STAGE_BUCKET": {
              "Fn::GetAtt": [
                "foundationsstagebucket7D53680B",
                "Arn"
              ]
            },
            "STAGE_BUCKET_KEY": {
              "Fn::GetAtt": [
                "foundationsstagebucketkey2FA5FAF2",
                "Arn"
              ]
            },
            "ATHENA_BUCKET": {
              "Fn::GetAtt": [
                "foundationsathenabucket9F4DB591",
                "Arn"
              ]
            },
            "ATHENA_BUCKET_KEY": {
              "Fn::GetAtt": [
                "foundationsathenabucketkey78C4A13F",
                "Arn"
              ]
            },
            "LAKE_FORMATION_CATALOG": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:lakeformation:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":catalog:",
                  {
                    "Ref": "AWS::AccountId"
                  }
                ]
              ]
            },
            "OCTAGON_DATASETS_TABLE_KEY": {
              "Fn::GetAtt": [
                "foundationsdatasetstablekeyB7FA0C66",
                "Arn"
              ]
            },
            "OCTAGON_OBJECT_METADATA_TABLE_KEY": {
              "Fn::GetAtt": [
                "foundationsmetadatatablekeyA9378A25",
                "Arn"
              ]
            },
            "OCTAGON_PIPELINE_EXECUTION_TABLE_KEY": {
              "Fn::GetAtt": [
                "foundationspehtablekey7888761E",
                "Arn"
              ]
            },
            "OCTAGON_PIPELINES_TABLE_KEY": {
              "Fn::GetAtt": [
                "foundationspipelinestablekeyB645FADF",
                "Arn"
              ]
            },
            "GLUE_JOB_NAME": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-adtech-amc-glue-job"
                ]
              ]
            }
          }
        },
        "Handler": "create_user_iam.event_handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "useriamCreateUserIAMResourcesRoleE9CED8F0",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 300
      },
      "DependsOn": [
        "bucketsartifactsPolicyCB476A7C",
        "bucketsartifactsE01AF792",
        "useriamCreateUserIAMResourcesRoleDefaultPolicyD552A92E",
        "useriamCreateUserIAMResourcesRoleE9CED8F0"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      },
      "Condition": "DeployingFullApplication"
    },
    "useriamuseriamlambdaalarmuseriamlambdaalarmthrottlesC0240D8C": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "useriamCreateUserIAMResourcesC1AE63C0"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "DeployingFullApplication"
    },
    "useriamuseriamlambdaalarmuseriamlambdaalarmerrors4CD0C862": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "useriamCreateUserIAMResourcesC1AE63C0"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      },
      "Condition": "DeployingFullApplication"
    },
    "useriamUserIAMResourcesLambdaCustomResource2BC0F9D4": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "useriamCreateUserIAMResourcesC1AE63C0",
            "Arn"
          ]
        },
        "artifacts_bucket_name": {
          "Ref": "bucketsartifactsE01AF792"
        },
        "artifacts_key_prefix": "user-iam/"
      },
      "DependsOn": [
        "useriamCreateUserIAMLambdaIamPolicy05BFF285"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "DeployingFullApplication"
    },
    "lakeformationsettingsLakeFormationSettingsLambdaIamPolicy7DB3E6E4": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "lakeformation:PutDataLakeSettings",
                "lakeformation:GetDataLakeSettings",
                "lakeformation:ListPermissions",
                "lakeformation:ListLFTags",
                "lakeformation:BatchGrantPermissions"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:lakeformation:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":catalog:",
                    {
                      "Ref": "AWS::AccountId"
                    }
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "lakeformationsettingsLakeFormationSettingsLambdaIamPolicy7DB3E6E4",
        "Roles": [
          {
            "Ref": "lakeformationsettingsLakeformationSettingsLambdaRole8BBA04CB"
          }
        ]
      }
    },
    "lakeformationsettingsLakeformationSettingsLambdaRole8BBA04CB": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      }
    },
    "lakeformationsettingsLakeformationSettingsLambdaA54E4DA0": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "arm64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "lakeformationsettingsLakeformationSettingsLambdaA54E4DA08c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Description": "Lambda function for custom resource for creating and placing the user iam resources in the S3 artifacts bucket",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0193",
            "SOLUTION_VERSION": "v2.0.1"
          }
        },
        "Handler": "remove_data_lake_admin.event_handler",
        "Layers": [
          {
            "Ref": "PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184"
          },
          {
            "Ref": "SolutionsLayerC3651413193"
          }
        ],
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "lakeformationsettingsLakeformationSettingsLambdaRole8BBA04CB",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 300
      },
      "DependsOn": [
        "lakeformationsettingsLakeformationSettingsLambdaRole8BBA04CB"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      }
    },
    "lakeformationsettingslakeformationsettingslambdaalarmlakeformationsettingslambdaalarmthrottlesC5CF3E2A": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "lakeformationsettingsLakeformationSettingsLambdaA54E4DA0"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      }
    },
    "lakeformationsettingslakeformationsettingslambdaalarmlakeformationsettingslambdaalarmerrors1879710A": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "lakeformationsettingsLakeformationSettingsLambdaA54E4DA0"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1
      }
    },
    "lakeformationsettingsLakeformationSettingsLambdaCustomResourcedatasetcr7F8C730C": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "lakeformationsettingsLakeformationSettingsLambdaA54E4DA0",
            "Arn"
          ]
        },
        "ADMIN_ROLE_LIST": [
          {
            "Fn::GetAtt": [
              "datalakedatasetamcgluestagebjobrole42FDBFE5",
              "Arn"
            ]
          }
        ]
      },
      "DependsOn": [
        "lakeformationsettingsLakeformationSettingsLambdaA54E4DA0"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "lakeformationsettingsLakeformationSettingsLambdaCustomResourcepmncr0C5382B2": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "lakeformationsettingsLakeformationSettingsLambdaA54E4DA0",
            "Arn"
          ]
        },
        "ADMIN_ROLE_LIST": [
          {
            "Fn::GetAtt": [
              "platformmanagerplatformmanagerrole07D31A4A",
              "Arn"
            ]
          }
        ]
      },
      "DependsOn": [
        "lakeformationsettingsLakeformationSettingsLambdaA54E4DA0"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "MetricsMetricsFunctionRoleA9C05594": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy"
          }
        ]
      },
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "reason": "* Resources will be suppred by cdk nag and it has to be not suppressed",
              "id": "AwsSolutions-IAM5",
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/*"
              ]
            }
          ]
        }
      }
    },
    "MetricsMetricsFunctionD6992891": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "S3Bucket"
                  ]
                },
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Fn::FindInMap": [
                    "SourceCode",
                    "General",
                    "KeyPrefix"
                  ]
                },
                "MetricsMetricsFunctionD69928918c1a6ddf-7842-4a15-bd2d-4c4898022d12.zip"
              ]
            ]
          }
        },
        "Handler": "metrics.handler",
        "Role": {
          "Fn::GetAtt": [
            "MetricsMetricsFunctionRoleA9C05594",
            "Arn"
          ]
        },
        "Runtime": "python3.9"
      },
      "DependsOn": [
        "MetricsMetricsFunctionRoleA9C05594"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
            },
            {
              "id": "W89",
              "reason": "Lambda functions should be deployed inside a VPC"
            },
            {
              "id": "W58",
              "reason": "Lambda functions require permission to write CloudWatch Logs"
            }
          ]
        }
      }
    },
    "SolutionMetricsAnonymousData": {
      "Type": "Custom::AnonymousData",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "MetricsMetricsFunctionD6992891",
            "Arn"
          ]
        },
        "Solution": "amazon-marketing-cloud-insights-on-aws",
        "Region": {
          "Ref": "AWS::Region"
        }
      },
      "Condition": "SendAnonymousUsageData"
    },
    "AppRegistryApp": {
      "Type": "AWS::ServiceCatalogAppRegistry::Application",
      "Properties": {
        "Description": "Service Catalog application to track and manage all your resources for the solution amazon-marketing-cloud-insights-on-aws",
        "Name": {
          "Fn::Join": [
            "",
            [
              "App-",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        },
        "Tags": {
          "Solutions:SolutionID": "SO0193",
          "Solutions:SolutionName": "amazon-marketing-cloud-insights-on-aws",
          "Solutions:SolutionVersion": "v2.0.1"
        }
      }
    },
    "AppAttributeGroup": {
      "Type": "AWS::ServiceCatalogAppRegistry::AttributeGroup",
      "Properties": {
        "Attributes": {
          "version": "v2.0.1",
          "solutionID": "SO0193",
          "solutionName": "amazon-marketing-cloud-insights-on-aws"
        },
        "Description": "Attributes for Solutions Metadata",
        "Name": {
          "Fn::Join": [
            "",
            [
              "AttrGrp-",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        }
      }
    },
    "AttributeGroupAssociation": {
      "Type": "AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation",
      "Properties": {
        "Application": {
          "Fn::Join": [
            "",
            [
              "App-",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        },
        "AttributeGroup": {
          "Fn::Join": [
            "",
            [
              "AttrGrp-",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        }
      },
      "DependsOn": [
        "AppAttributeGroup",
        "AppRegistryApp"
      ]
    },
    "AppResourceAssociation": {
      "Type": "AWS::ServiceCatalogAppRegistry::ResourceAssociation",
      "Properties": {
        "Application": {
          "Fn::Join": [
            "",
            [
              "App-",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        },
        "Resource": {
          "Ref": "AWS::StackName"
        },
        "ResourceType": "CFN_STACK"
      },
      "DependsOn": [
        "AppRegistryApp"
      ]
    }
  },
  "Outputs": {
    "userscriptsUserScriptOutput0841C236": {
      "Description": "Use this command to download the solution user scripts locally",
      "Value": {
        "Fn::Join": [
          "",
          [
            "\n            aws s3 cp s3://",
            {
              "Ref": "bucketsartifactsE01AF792"
            },
            "/user-scripts ./amc_insights_user_scripts --recursive\n        "
          ]
        ]
      }
    },
    "foundationsRawBucket1A1140BB": {
      "Description": "Use this link to access the Raw bucket",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://s3.console.aws.amazon.com/s3/buckets/",
            {
              "Ref": "foundationsrawbucket6964B12D"
            }
          ]
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsStageBucket8D5A9ECB": {
      "Description": "Use this link to access the Stage bucket",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://s3.console.aws.amazon.com/s3/buckets/",
            {
              "Ref": "foundationsstagebucket7D53680B"
            }
          ]
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsAthenaBucket262A2812": {
      "Description": "Use this link to access the Athena bucket",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://s3.console.aws.amazon.com/s3/buckets/",
            {
              "Ref": "foundationsathenabucket9F4DB591"
            }
          ]
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsOctagonDatasetsTableFA1FD570": {
      "Description": "Use this link to access the Octagon Datasets table",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "AWS::Region"
            },
            ".console.aws.amazon.com/dynamodbv2/home?region=",
            {
              "Ref": "AWS::Region"
            },
            "#table?name=",
            {
              "Ref": "foundationsdatasetstableD59647EC"
            }
          ]
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsOctagonMetadataTableF9D2E2EC": {
      "Description": "Use this link to access the Octagon Metadata table",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "AWS::Region"
            },
            ".console.aws.amazon.com/dynamodbv2/home?region=",
            {
              "Ref": "AWS::Region"
            },
            "#table?name=",
            {
              "Ref": "foundationsmetadatatable05F0F3CF"
            }
          ]
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsOctagonPipelineExecutionHistoryTableE9259F47": {
      "Description": "Use this link to access the Octagon Pipeline Execution History table",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "AWS::Region"
            },
            ".console.aws.amazon.com/dynamodbv2/home?region=",
            {
              "Ref": "AWS::Region"
            },
            "#table?name=",
            {
              "Ref": "foundationspehtable62D09842"
            }
          ]
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "foundationsOctagonPipelinesTable51701BEC": {
      "Description": "Use this link to access the Octagon Pipelines table",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "AWS::Region"
            },
            ".console.aws.amazon.com/dynamodbv2/home?region=",
            {
              "Ref": "AWS::Region"
            },
            "#table?name=",
            {
              "Ref": "foundationspipelinestableC835903B"
            }
          ]
        ]
      },
      "Condition": "ShouldDeployDataLakeCondition"
    },
    "wfmWFMCustomerConfigTableD54A7B2C": {
      "Description": "Use this link to access the WFM Customer Config table",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "AWS::Region"
            },
            ".console.aws.amazon.com/dynamodbv2/home?region=",
            {
              "Ref": "AWS::Region"
            },
            "#table?name=",
            {
              "Ref": "wfmwfmCustomerConfig2F0732CB"
            }
          ]
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmWFMWorkflowsTableC6FD2700": {
      "Description": "Use this link to access the WFM Workflows table",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "AWS::Region"
            },
            ".console.aws.amazon.com/dynamodbv2/home?region=",
            {
              "Ref": "AWS::Region"
            },
            "#table?name=",
            {
              "Ref": "wfmwfmWorkflows325855B5"
            }
          ]
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "wfmWFMExecutionStatusTable578BC77E": {
      "Description": "Use this link to access the WFM Execution Status table",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "AWS::Region"
            },
            ".console.aws.amazon.com/dynamodbv2/home?region=",
            {
              "Ref": "AWS::Region"
            },
            "#table?name=",
            {
              "Ref": "wfmwfmWorkflowExecutions11C6BC9C"
            }
          ]
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "tpsTPSCustomerConfigTable6045F048": {
      "Description": "Use this link to access the TPS Customer Config table",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "AWS::Region"
            },
            ".console.aws.amazon.com/dynamodbv2/home?region=",
            {
              "Ref": "AWS::Region"
            },
            "#table?name=",
            {
              "Ref": "tpstpsCustomerConfigDCD9A325"
            }
          ]
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "platformmanagerSageMakerNotebookInstance61A5A1A0": {
      "Description": "Use this link to access the Platform Manager notebook instance",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "AWS::Region"
            },
            ".console.aws.amazon.com/sagemaker/home?region=",
            {
              "Ref": "AWS::Region"
            },
            "#/notebook-instances/",
            {
              "Ref": "AWS::StackName"
            },
            "-amc-insights-platform-manager-notebooks"
          ]
        ]
      },
      "Condition": "ShouldDeployMicroservicesCondition"
    },
    "useriamUserOperationalPolicyOutputE3410F52": {
      "Description": "Use this link to view and download the operational IAM policy for this stack",
      "Value": {
        "Fn::Join": [
          "",
          [
            "\n            https://s3.console.aws.amazon.com/s3/object/",
            {
              "Ref": "bucketsartifactsE01AF792"
            },
            "?region=",
            {
              "Ref": "AWS::Region"
            },
            "&prefix=user-iam/IAM_POLICY_OPERATE.json\n            "
          ]
        ]
      },
      "Condition": "DeployingFullApplication"
    }
  }
}